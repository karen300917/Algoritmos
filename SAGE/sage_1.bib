@article{doi:10.1177/1475725716659252,
author = {Nicole D. Anderson},
title = {A Call for Computational Thinking in Undergraduate Psychology},
journal = {Psychology Learning & Teaching},
volume = {15},
number = {3},
pages = {226–234},
year = {2016a},
doi = {10.1177/1475725716659252},
URL = {https://doi-org.crai.referencistas.com/10.1177/1475725716659252},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1475725716659252},
abstract = {Computational thinking is an approach to problem solving that is typically employed by computer programmers. The advantage of this approach is that solutions can be generated through algorithms that can be implemented as computer code. Although computational thinking has historically been a skill that is exclusively taught within computer science, there has been a more recent movement to introduce these skills within other disciplines. Psychology is an excellent example of a discipline that would benefit from computational thinking skills because of the nature of questions that are typically asked within the discipline. However, there has not been a formal curriculum proposed to teach computational thinking within psychology and the behavioural sciences. I will argue that computational thinking is a fundamental skill that can easily be introduced to psychology students throughout their undergraduate education. This would provide students with the skills necessary to become successful researchers, and would also provide a practical and marketable skill to all psychology graduates.}
}

@article{doi:10.1177/07356331211033158,
author = {Ndudi O. Ezeamuzie and Jessica S. C. Leung},
title = {Computational Thinking Through an Empirical Lens: A Systematic Review of Literature},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {2},
pages = {481–511},
year = {2022b},
doi = {10.1177/07356331211033158},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211033158},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211033158},
abstract = {This article provides an overview of the diverse ways in which computational thinking has been operationalised in the literature. Computational thinking has attracted much interest and debatably ranks in importance with the time-honoured literacy skills of reading, writing, and arithmetic. However, learning interventions in this subject have modelled computational thinking differently. We conducted a systematic review of 81 empirical studies to examine the nature, explicitness, and patterns of definitions of computational thinking. Data analysis revealed that most of the reviewed studies operationalised computational thinking as a composite of programming concepts and preferred definitions from assessment-based frameworks. On the other hand, a substantial number of the studies did not establish the meaning of computational thinking when theorising their interventions nor clearly distinguish between computational thinking and programming. Based on these findings, this article proposes a model of computational thinking that focuses on algorithmic solutions supported by programming concepts which advances the conceptual clarity between computational thinking and programming.}
}

@article{doi:10.1177/21582440211016418,
author = {Vance Kite and Soonhye Park and Eric Wiebe},
title = {The Code-Centric Nature of Computational Thinking Education: A Review of Trends and Issues in Computational Thinking Education Research},
journal = {Sage Open},
volume = {11},
number = {2},
pages = {21582440211016416},
year = {2021c},
doi = {10.1177/21582440211016418},
URL = {https://doi-org.crai.referencistas.com/10.1177/21582440211016418},
eprint = {https://doi-org.crai.referencistas.com/10.1177/21582440211016418},
abstract = {Computational thinking (CT) is being recognized as a critical component of student success in the digital era. Many contend that integrating CT into core curricula is the surest method for providing all students with access to CT. However, the CT community lacks an agreed-upon conceptualization of CT that would facilitate this integration, and little effort has been made to critically analyze and synthesize research on CT/content integration (CTCI). Conflicting CT conceptualizations and little understanding of evidence-based strategies for CTCI could result in significant barriers to increasing students’ access to CT. To address these concerns, we analyzed 80 studies on CT education, focusing on both the CT conceptualizations guiding current CT education research and evidence-based strategies for CTCI. Our review highlights the code-centric nature of CT education and reveals significant gaps in our understanding of CTCI and CT professional development for teachers. Based on these findings, we propose an approach to operationalizing CT that promotes students’ participation in CT, present promising methods for infusing content with CT, and discuss future directions for CT education research.}
}

@article{doi:10.1177/07356331221121052,
author = {Rina PY Lai and Michelle R Ellefson},
title = {How Multidimensional is Computational Thinking Competency? A Bi-Factor Model of the Computational Thinking Challenge},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {2},
pages = {259–282},
year = {2023d},
doi = {10.1177/07356331221121052},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221121052},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221121052},
abstract = {Computational thinking (CT) is an emerging and multifaceted competence important to the computing era. However, despite the growing consensus that CT is a competence domain, its theoretical and empirical account remain scarce in the current literature. To address this issue, rigorous psychometric evaluation procedures were adopted to investigate the structure of CT competency, as measured by Computational Thinking Challenge (Lai, 2021a), in a large sample of 1,130 British secondary school students (Mage = 14.14 years, SDage = 1.45). Based on model comparison from an exploratory multidimensional item response theory approach, the results supported the multidimensional operationalization of CT competency. A confirmatory bi-factor item response theory model further suggested CT competency is comprised of a general CT competency factor and two specific factors for programming and non-programming problem-solving. Despite the multidimensionality, the common variance is largely explained by a primary general factor of CT competency, thus the use of a single scale score is recommended. Psychometric evaluation from the bi-factor model indicated good psychometric properties of the assessment tool. Overall, the bi-factor model provides a useful approach to investigating CT competency and serves as a robust test validation tool.}
}

@article{doi:10.3102/00346543241241327,
author = {Kathy A. Mills and Jen Cope and Laura Scholes and Luke Rowe},
title = {Coding and Computational Thinking Across the Curriculum: A Review of Educational Outcomes},
journal = {Review of Educational Research},
volume = {0},
number = {0},
pages = {00346543241241327},
year = {2024e},
doi = {10.3102/00346543241241327},
URL = {https://doi-org.crai.referencistas.com/10.3102/00346543241241327},
eprint = {https://doi-org.crai.referencistas.com/10.3102/00346543241241327},
abstract = {Teaching coding and computational thinking is an emerging educational imperative, now embedded in compulsory curriculum in the United States, Finland, the UK, Germany, Belgium, the Netherlands, New Zealand, and Australia. This meta-synthesis of 49 studies critically reviews recent international research (2009–2022) of coding and computational thinking as core and integrated across the curriculum. It addresses four essential problems: (a) What are the key features of learning environments that successfully develop students’ coding and computational thinking? (b) What is the impact of student engagement in coding and computational thinking on learning outcomes across curriculum areas? (c) What pedagogical constraints are evident for coding and computational thinking, including across curriculum areas? and (d) Which conceptual frameworks support coding and computational thinking, and what has been marginalized or excluded? The review advances knowledge of coding and computational thinking—vital to guide and develop future AI-based solutions to real-world problems that challenge disciplinary boundaries.}
}

@article{doi:10.1177/07356331241226746,
author = {Yan Sun and Jamie Dyer and Jonathan Harris},
title = {Preparing Teachers for Teaching Spatial Computational Thinking With Integrated Data Viewer Visualization of Weather Data: A Discipline-Based Perspective of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {4},
pages = {1061–1086},
year = {2024f},
doi = {10.1177/07356331241226746},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241226746},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241226746},
abstract = {This study was grounded in the spatial computational thinking model developed by the 3D Weather project funded by the NSF STEM+C program. The model reflects a discipline-based perspective towards computational thinking and captures the spatial nature of computational thinking in meteorology and the reliance of computational thinking on spatial thinking for geospatial analysis. The research was conducted among nineteen teachers attending the summer workshop offered by the project in its third project year to prepare them for teaching spatial computational thinking with IDV (Integrated Data Viewer, downloadable at https://www.unidata.ucar.edu/software/idv/) visualization of weather data. Quantitative survey data were collected measuring these teachers’ meteorology content knowledge, spatial computational thinking, self-efficacy for teaching spatial computational thinking, and epistemic cognition of teaching meteorology. The data were analyzed to examine the effects of the workshop in terms of these variables and the correlations among them were also explored.}
}

@article{doi:10.1177/0735633120972356,
author = {Meng-Jung Tsai and Jyh-Chong Liang and Chung-Yuan Hsu},
title = {The Computational Thinking Scale for Computer Literacy Education},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {4},
pages = {579–602},
year = {2021g},
doi = {10.1177/0735633120972356},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120972356},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120972356},
abstract = {Computational thinking has received tremendous attention from computer science educators and educational researchers in the last decade. However, most prior literature defines computational thinking as thinking outcomes rather than thinking processes. Based on Selby and Woodland’s framework, this study developed and validated the Computational Thinking Scale (CTS) to assess all students’ thought processes of computational thinking for both general and specific problem-solving contexts in five dimensions: abstraction, decomposition, algorithmic thinking, evaluation and generalization. A survey including 25 candidate items for CTS as well as demographic variables was administered to 388 junior high school students in Taiwan. An explorative factor analysis using the principal axis method with the oblimin rotation was used to validate the scale. Finally, 19 items were extracted successfully under the designed five dimensions, with a total explained variance of 64.03% and an overall reliability of 0.91. Results of the demographic comparisons showed that boys had a greater disposition than girls in decomposition thinking when solving problems using computer programming. In addition, programming learning experience, especially self-directed learning and after-school learning, had significant positive effects on all dimensions of CTS. Several future studies are suggested using this tool.}
}

@article{doi:10.1177/07356331211017794,
author = {Meng-Jung Tsai and Jyh-Chong Liang and Silvia Wen-Yu Lee and Chung-Yuan Hsu},
title = {Structural Validation for the Developmental Model of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {1},
pages = {56–73},
year = {2022h},
doi = {10.1177/07356331211017794},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211017794},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211017794},
abstract = {A prior study developed the Computational Thinking Scale (CTS) for assessing individuals’ computational thinking dispositions in five dimensions: decomposition, abstraction, algorithmic thinking, evaluation, and generalization. This study proposed the Developmental Model of Computational Thinking through validating the structural relationships among the five factors of the CTS. To examine the model, a questionnaire including the CTS was administered to 472 middle school students. A confirmatory factor analysis was used to confirm the construct of the measurements, and a PLS-SEM analysis was used to validate the structural relationships among the factors. The results confirmed that the 19-item CTS has good item reliability, internal consistency, and construct reliability for measuring computational thinking (CT). In the Developmental Model of CT, decomposition and abstraction significantly predict all other three CT dispositions, suggesting that they are the two fundamental factors required for CT development. Moreover, a significant linear prediction path was shown starting from algorithmic thinking, evaluation, until generalization. Thus, a multi-level model was confirmed for the conceptual framework of CT. This model suggests a possible sequence for CT development which may provide a guideline for the teaching objectives of CT for different learning stages in different school levels. Decomposition and abstraction are especially suggested to be emphasized in school curricula before teaching algorithmic thinking or algorithm designs.}
}

@article{doi:10.1177/0735633120988807,
author = {Sheng-Yi Wu and Yu-Sheng Su},
title = {Visual Programming Environments and Computational Thinking Performance of Fifth- and Sixth-Grade Students},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {6},
pages = {1075–1092},
year = {2021i},
doi = {10.1177/0735633120988807},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120988807},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120988807},
abstract = {Currently, many countries actively cultivate students to develop computational thinking ability. Many visual programming environments (VPEs) and physical robot courses have been integrated into computational thinking learning in the elementary education stage. This study explores the relationship between the programming learning environment (including VPE, physical robots, and no experience) and the computational thinking ability of higher-grade elementary school students of different genders. The results show that learning through VPE or physical robots can help students improve their computational thinking ability and that students learn better via physical robots. In addition, among the four dimensions of computational thinking ability, most students are weak in algorithm design. In terms of gender, no differences exist in computational thinking ability. Further analysis reveals that female students have better decomposition performance in VPE learning, while male students have better algorithm design performance.}
}

@article{doi:10.1177/07356331231220313,
author = {Ezgi Arzu Yurdakök and Filiz Kalelioğlu},
title = {The Effect of Teaching Physical Programming on Computational Thinking Skills and Self-Efficacy Perceptions Towards Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {3},
pages = {785–815},
year = {2024j},
doi = {10.1177/07356331231220313},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231220313},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231220313},
abstract = {The study examined the effect of teaching text-based programming with a physical programming tool on secondary school students’ computational thinking skills and self-efficacy perceptions. The study was conducted according to a sequential explanatory design as a mixed method research. The study group consisted of 85 secondary school students. Within the scope of the study, a physical programming tool called Micro:bit was used to teach Python programming for a period of 6 weeks. Data were collected using the Self-Efficacy Perception Scale for Computational Thinking Skill, Bebras: International Challenge on Informatics and Computational Thinking Tasks, tests focused on programming tool, concepts, and processes, and through semi-structured interview questioning. According to the findings obtained from pretests and posttests, a significant and positive difference was found in the students’ computational thinking skills and self-efficacy perceptions towards computational thinking skill. As a result of having received instruction in programming, the students satisfactorily learnt the required programming concepts and processes. Through learning Python programming with a physical programming tool, the students not only gained the skills required to write appropriate syntax, and to test and debug code, but they also learnt programming concepts such as variables, conditional expressions, loops, and functions.}
}

@article{doi:10.3102/0034654317710096,
author = {Francisco Buitrago Flórez and Rubby Casallas and Marcela Hernández and Alejandro Reyes and Silvia Restrepo and Giovanna Danies},
title = {Changing a Generation’s Way of Thinking: Teaching Computational Thinking Through Programming},
journal = {Review of Educational Research},
volume = {87},
number = {4},
pages = {834–860},
year = {2017a},
doi = {10.3102/0034654317710096},
URL = {https://doi-org.crai.referencistas.com/10.3102/0034654317710096},
eprint = {https://doi-org.crai.referencistas.com/10.3102/0034654317710096},
abstract = {Computational thinking (CT) uses concepts that are essential to computing and information science to solve problems, design and evaluate complex systems, and understand human reasoning and behavior. This way of thinking has important implications in computer sciences as well as in almost every other field. Therefore, we contend that CT should be taught in elementary schools and included in every university’s educational curriculum. Several studies that measure the impact of teaching programming, analytical thinking, and CT have been conducted. In this review, we analyze and discuss findings from these studies and highlight the importance of learning programming with a focus on the development of CT skills at a young age. We also describe the tools that are available to improve the teaching of CT and provide a state-of-the-art overview of how programming is being taught at schools and universities in Colombia and around the world.}
}

@article{doi:10.1177/07356331221081753,
author = {Laila El-Hamamsy and María Zapata-Cáceres and Estefanía Martín Barroso and Francesco Mondada and Jessica Dehler Zufferey and Barbara Bruno},
title = {The Competent Computational Thinking Test: Development and Validation of an Unplugged Computational Thinking Test for Upper Primary School},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {7},
pages = {1818–1866},
year = {2022b},
doi = {10.1177/07356331221081753},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221081753},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221081753},
abstract = {With the increasing importance of Computational Thinking (CT) at all levels of education, it is essential to have valid and reliable assessments. Currently, there is a lack of such assessments in upper primary school. That is why we present the development and validation of the competent CT test (cCTt), an unplugged CT test targeting 7–9 year-old students. In the first phase, 37 experts evaluated the validity of the cCTt through a survey and focus group. In the second phase, the test was administered to 1519 students. We employed Classical Test Theory, Item Response Theory, and Confirmatory Factor Analysis to assess the instruments’ psychometric properties. The expert evaluation indicates that the cCTt shows good face, construct, and content validity. Furthermore, the psychometric analysis of the student data demonstrates adequate reliability, difficulty, and discriminability for the target age groups. Finally, shortened variants of the test are established through Confirmatory Factor Analysis. To conclude, the proposed cCTt is a valid and reliable instrument, for use by researchers and educators alike, which expands the portfolio of validated CT assessments across compulsory education. Future assessments looking at capturing CT in a more exhaustive manner might consider combining the cCTt with other forms of assessments.}
}

@article{doi:10.1177/07356331221134423,
author = {Ndudi O. Ezeamuzie},
title = {Abstractive-Based Programming Approach to Computational Thinking: Discover, Extract, Create, and Assemble},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {3},
pages = {605–638},
year = {2023c},
doi = {10.1177/07356331221134423},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221134423},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221134423},
abstract = {Most studies suggest that students develop computational thinking (CT) through learning programming. However, when the target of CT is decoupled from programming, emerging evidence challenges the assertion of CT transferability from programming. In this study, CT was operationalized in everyday problem-solving contexts in a learning experiment (n = 59) that investigated whether learning programming enhances students’ CT skills. Specifically, this study examined the influence of a novel, systematic and micro instructional strategy that is grounded in abstraction and comprised of four independent but related processes – discover, extract, create, and assemble (DECA) towards simplification of problem-solving. Subsidiary questions explored the effects of students’ age, gender, computer proficiency, and prior programming experience on the development of CT. No significant difference was found between the CT skill and programming knowledge of the groups at the posttest. However, within-group paired t-tests showed that the experimental group that integrated DECA had significant improvement in CT but not in the control group across the pretest-posttest axis. Implications of the inconclusive finding about the transfer of programming skills to CT are emphasized and the arguments for disentangling CT from programming are highlighted.}
}

@article{doi:10.1177/0735633120940954,
author = {Rotem Israel-Fishelson and Arnon Hershkovitz and Andoni Eguíluz and Pablo Garaizar and Mariluz Guenaga},
title = {The Associations Between Computational Thinking and Creativity: The Role of Personal Characteristics},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {8},
pages = {1415–1447},
year = {2021d},
doi = {10.1177/0735633120940954},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120940954},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120940954},
abstract = {Computational Thinking (CT) and creativity are considered two vital skills for the 21st century that should be incorporated into future curricula around the world. We studied the relationship between these two constructs while focusing on learners’ personal characteristics. Two types of creativity were examined: creative thinking and computational creativity. The research was conducted among 174 middle school students from Spain. Data collected using a standardized creativity test (Torrance’s TTCT) were triangulated with data drawn from students’ log files that documented their activity in a game-based learning environment for CT (Kodetu). We found some interesting associations between CT and the two constructs of creativity. These associations shed light on positive associations between each of the two creativity constructs and CT acquisition, as well as between the two creativity constructs themselves. Additionally, we highlight differences between boys and girls, as girls were found to be more creative on both creativity measures. Other differences associated with school affiliation, prior coding knowledge, and technology affinity are also discussed.}
}

@article{doi:10.1177/0735633120973429,
author = {Rotem Israel-Fishelson and Arnon Hershkovitz and Andoni Eguíluz and Pablo Garaizar and Mariluz Guenaga},
title = {A Log-Based Analysis of the Associations Between Creativity and Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {5},
pages = {926–959},
year = {2021e},
doi = {10.1177/0735633120973429},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120973429},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120973429},
abstract = {Creativity and Computational Thinking (CT) have been both extensively researched in recent years. However, the associations between them are still not fully understood despite their recognition as essential competencies for the digital age. This study looks to bridge this gap by examining the association between CT and two types of creativity, i.e., Creative Thinking and Computational Creativity. The research was conducted among 124 middle school students from Spain, who were divided into control and experimental groups; the intervention included an explicit encouragement to be as creative as possible (i.e., to submit multiple correct solutions) in a given learning task. Data were analyzed from a standardized creativity test (Torrance’s TTCT) and cross-referenced with log files that documented the students’ activities in the Kodetu game-based learning environment. Our research findings indicate some interesting associations between CT and Creativity. First, we found that creativity contributes to CT. Second, we found that CT is transferable across different domains. Finally, we found that Computational Creativity can develop and improve over time.}
}

@article{doi:10.1177/0735633120972050,
author = {Ugur Kale and Jiangmei Yuan},
title = {Still a New Kid on the Block? Computational Thinking as Problem Solving in Code.org},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {4},
pages = {620–644},
year = {2021f},
doi = {10.1177/0735633120972050},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120972050},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120972050},
abstract = {Computational thinking is a means to understand and solve complex problems through using computer science concepts and techniques. While there is an increase in the number of initiatives focusing on coding, whether they (a) address computational thinking and problem-solving skills and (b) use methods of teaching problem solving is yet to be explored. As a preliminary step, this study focuses on examining 3rd grade lesson plans at Code.org. The analysis identified various components of computational thinking and problem solving as well as specific problem-solving teaching methods used to address these skills. Besides such cognitive outcomes, the findings also revealed affective, reflective, and social aspects of learning supported in the lessons.}
}

@article{doi:10.1177/07356331241242435,
author = {Tongxi Liu},
title = {Relationships Between Executive Functions and Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1267–1301},
year = {2024g},
doi = {10.1177/07356331241242435},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241242435},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241242435},
abstract = {Addressing cognitive disparities has become a paramount concern in computational thinking (CT) education. The intricate and nuanced relationships between CT and cognitive variations emphasize the needs to accommodate diverse cognitive profiles when fostering CT skills, recognizing that these cognitive functions can manifest as either strengths or limitations in different students. Consequently, understanding the connections between students’ cognitive functions and CT skills assumes pivotal importance in the design of personalized instructional strategies for CT. Despite a general consideration of learning variability in CT education, empirical insights exploring the correlation between cognitive skills and CT competencies remain notably scarce. This study endeavors to bridge this research gap by investigating the links between executive functions and CT skills, as well as the associations between their sub-dimensions. The results reveal a statistically significant correlation coefficient of 0.452 between these two domains, underscoring the notable connection between executive functions and CT abilities. Furthermore, the sub-dimensional analysis offers a comprehensive understanding of how specific executive functions uniquely contribute to certain CT skills. In light of these findings, this research offers a promising pathway for the development of tailored CT education programs that can cater to the unique needs of each individual, ultimately facilitating inclusive CT programs and making significant contributions to broaden STEM education and future workforce.}
}

@article{doi:10.1177/07356331231193142,
author = {Marta Peracaula-Bosch and Juan González-Martínez},
title = {Towards a Hermeneutics of Computational Thinking in Wing’s Approximations},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {8},
pages = {139–158},
year = {2024h},
doi = {10.1177/07356331231193142},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231193142},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231193142},
abstract = {In this article, we delve into a hermeneutic process that analyzes the term Computational Thinking as it was constructed through Wing’s series of iterations in conceptualization attempts (2006, 2008, 2011 and 2014). On the one hand, this brings us to analyze the relations and intersections between different process of thought (analytical, logical, mathematical, system, engineering, algorithmic) and the role of search for simplicity, generalization, and scalability in the layers of abstraction in Computational Thinking. On the other hand, we explore the roots and the discursive environment of authors that could contribute to this conceptualizing process in the years around its popularization following Jeannette Wing’s founding article in 2006. We have also included in our analysis the points of convergence with Seymour Papert’s work related to the computer-machine seen as an “object-to-think-with” helping to the construction of knowledge from an epistemological perspective to the computing-human. Even though a consensus on the definition of the concept has not yet ben encountered, the analysis helps to highlight the solid reference points that address what is at the core of Computational thinking and what should be the framework of educational interventions and research that revolve around it.}
}

@article{doi:10.1177/01614681221104043,
author = {Rose K. Pozos and Samuel Severance and Jill Denner and Kip Tellez},
title = {Exploring Design Principles in Computational Thinking Instruction for Multilingual Learners},
journal = {Teachers College Record},
volume = {124},
number = {5},
pages = {127–145},
year = {2022i},
doi = {10.1177/01614681221104043},
URL = {https://doi-org.crai.referencistas.com/10.1177/01614681221104043},
eprint = {https://doi-org.crai.referencistas.com/10.1177/01614681221104043},
abstract = {Background: Multilingual learners have been overlooked and understudied in computer science education research. As the CS for All movement grows, it is essential to design integrated, justice-oriented curricula that help young multilingual learners begin to develop computational thinking skills and discourses. Purpose: We present a conceptual framework and accompanying design principles for justice-centered computational thinking activities that are language-rich, with the aim of supporting learners’ agency and building their capacity over time to use computing for good in their communities. Setting: Our work takes place in a research–practice partnership centered in an elementary school in California with a significant multilingual Latinx population. Research Design: We have engaged in two cycles of design-based research with preservice and in-service teachers at an elementary school. Through analysis of one case study during the second and most recent cycle, we examined the potential of teachers using our design principles for supporting multilingual learners’ language development through engagement in computational thinking. Conclusions: Our findings suggest that multilingual learners will engage in productive discourse when computational thinking lessons are designed to (1) be meaningfully contextualized, (2) position students as agentic learners, and (3) promote coherence over time. However, more research is needed to understand how teachers use these principles over time, and what additional supports are needed to ensure coordination between stakeholders to develop and effectively implement coherent learning progressions.}
}

@article{doi:10.1177/07356331231160294,
author = {Ying Zhou and Ching Sing Chai and Xiuting Li and Chao Ma and Baoping Li and Ding Yu and Jyh-Chong Liang},
title = {Application of Metacognitive Planning Scaffolding for the Cultivation of Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {6},
pages = {1123–1142},
year = {2023j},
doi = {10.1177/07356331231160294},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231160294},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231160294},
abstract = {Computational thinking is a way of thinking that helps people “think like a computer scientist” to solve practical problems. However, practicing computational thinking through programming is dependent on the problem solvers’ metacognition. This study investigated students’ metacognitive planning and problem-solving performance in programming through two quantitative studies. First, we analyzed the performance of metacognitive planning and of problem solving through the programming of 21 freshmen, and found that the metacognitive planning performance related to “problem description” and “program comprehension” was significantly correlated with problem-solving performance. Second, semi-scaffolding and full-scaffolding were designed based on the first study. Another 89 freshmen were randomly divided into three groups and were asked to write their programming plan with no-scaffolding, semi-scaffolding, or with full-scaffolding. ANCOVA revealed that the problem-solving performance of the no-scaffolding group was significantly weaker than that of the other two groups, but there was no significant difference between the semi-scaffolding and the full-scaffolding groups. The study indicated that semi-scaffolding had a similar effect to full-scaffolding on problem-solving performance. The study suggests that teachers should emphasize supporting students’ “problem description” and “program comprehension” using semi-scaffolding. This scaffolding technique is sufficient and efficient for training students’ computational thinking through problem solving in programming.}
}

@article{doi:10.1177/0735633119845694,
author = {Burcu Berikan and Selçuk Özdemir},
title = {Investigating “Problem-Solving With Datasets” as an Implementation of Computational Thinking: A Literature Review},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {2},
pages = {502–534},
year = {2020a},
doi = {10.1177/0735633119845694},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633119845694},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633119845694},
abstract = {This study aims to investigate problem-solving with dataset (PSWD) as a computational thinking learning implementation as reflected in academic publications. Specifically, the purpose is to specify the scope of PSWD, which overlaps with the data literacy, thinking with data, big data literacy, and data-based thinking concepts in the literature. Subaims of the study are to identify the conceptual structure of PSWD based on definitions in academic publications and to classify the reasons given in the literature to show the need for PSWD. For the purposes to investigate PSWD conceptually, to classify the reasons given for the need for PSWD, the obtained 54 publications were analyzed via content analysis. Moreover, this study investigates the most frequently suggested or used teaching strategies (in terms of instructional methods, instructional tools, and grade level) for PSWD in the literature. The frequencies of used words in selected publications referring instructional methods, instructional tools, and grade levels were shown in the findings of study. The importance of the study stems from its focus on a new approach to computational thinking instructional implementation.}
}
@article{doi:10.1177/07356331211037757,
author = {Xuemin Gao and Khe Foon Hew},
title = {Toward a 5E-Based Flipped Classroom Model for Teaching Computational Thinking in Elementary School: Effects on Student Computational Thinking and Problem-Solving Performance},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {2},
pages = {512–543},
year = {2022b},
doi = {10.1177/07356331211037757},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211037757},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211037757},
abstract = {Computational thinking (CT) has attracted significant interest among many educators around the globe. Despite this growing interest, research on CT and programming education in elementary school remains at an initial stage. Many relevant studies have adopted only one type of method to assess students’ CT, which may lead to an incomplete view of student development on CT, while other studies employed small sample sizes, which may increase the chance of assuming a false premise to be true. Moreover, conventional programming courses typically have two limitations (e.g., limited student active learning and student low engagement). Given these gaps, this study investigates the effects of a theory-based (5E framework) flipped classroom model (FCM) on elementary school students’ understanding of CT concepts, computational problem-solving performance, and perceptions of flipped learning. To achieve this, a pretest-posttest quasi-experimental study was conducted in a rural elementary school, including 125 students in the experimental group and 122 students in the control group. The results showed that the 5E-based FCM significantly improved student understanding of CT concepts and computational problem-solving abilities. The results also revealed positive student perception toward the FCM. The benefits and challenges of the 5E-based FCM are discussed.}
}
@article{doi:10.1177/0735633120965919,
author = {Danial Hooshyar and Margus Pedaste and Yeongwook Yang and Liina Malva and Gwo-Jen Hwang and Minhong Wang and Heuiseok Lim and Dejan Delev},
title = {From Gaming to Computational Thinking: An Adaptive Educational Computer Game-Based Learning Approach},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {3},
pages = {383–409},
year = {2021c},
doi = {10.1177/0735633120965919},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120965919},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120965919},
abstract = {Educational games have been increasingly used to improve students’ computational thinking. However, most existing games have focused on the theoretical knowledge of computational thinking, ignoring the development of computational thinking skills. Moreover, there is a lack of integration of adaptivity into educational computer games for computational thinking, which is crucial to addressing individual needs in developing computational thinking skills. In this study, we present an adaptive educational computer game, called AutoThinking, for developing students’ computational thinking skills in addition to their conceptual knowledge. To evaluate the effects of the game, we conducted an experimental study with 79 elementary school students in Estonia, where the experimental group learned with AutoThinking, while the control group used a traditional technology-enhanced learning approach. Our findings show that learning with the adaptive educational computer game significantly improved students’ computational thinking related to both conceptual knowledge and skills. Moreover, students using the adaptive educational computer game showed a significantly higher level of interest, satisfaction, flow state, and technology acceptance in learning computational thinking. Implications of the findings are also discussed.}
}
@article{doi:10.1177/07356331211043547,
author = {Rina P.Y. Lai},
title = {Teachers’ Ontological Perspectives of Computational Thinking and Assessment: A Text Mining Approach},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {3},
pages = {661–695},
year = {2022d},
doi = {10.1177/07356331211043547},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211043547},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211043547},
abstract = {As a dynamic and multifaceted construct, computational thinking (CT) has proven to be challenging to conceptualize and assess, which impedes the development of a workable ontology framework. To address this issue, the current article describes a novel approach towards understanding the ontological aspects of CT by using text mining and graph-theoretic techniques to elucidate teachers’ perspectives collected in an online survey (N = 105). In particular, a hierarchical cluster analysis, a knowledge representation method, was applied to identify sub-groups in CT conceptualization and assessment amongst teachers. Five clusters in conceptualization and two clusters in assessment were identified; several relevant and distinct themes were also extracted. The results suggested that teachers attributed CT as a competence domain, relevant in the problem- solving context, as well as applicable and transferrable to various disciplines. The results also shed light on the importance of using multiple approaches to assess the diversity of CT. Overall, the findings collectively contributed to a comprehensive and multi-perspective representation of CT that refine both theory and practice. The methodology employed in this article has suggested a minor but significant step towards addressing the quintessential questions of “what is CT?” and “how is it evidenced?”.}
}
@article{doi:10.1177/07356331231178948,
author = {Jingsi Ma and Yi Zhang and Zhifang Zhu and Sunan Zhao and Qiyun Wang},
title = {Game-Based Learning for Students’ Computational Thinking: A Meta-Analysis},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {7},
pages = {1430–1463},
year = {2023e},
doi = {10.1177/07356331231178948},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231178948},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231178948},
abstract = {Computational thinking (CT) education has drawn increasing attention from educators and researchers. This study conducted a meta-analysis of 27 empirical studies to examine the effectiveness of game-based learning (GBL) for fostering students’ CT. The effects of various factors on the learning process for acquiring CT were also examined. The results showed that (a) conducting GBL can foster students’ CT, and the overall effect was at the upper-middle level (Hedges’ g = .600, 95% CI [.465, .735], p < .001). (b) Furthermore, conducting GBL can improve students’ CT concepts (Hedges’ g = .916, 95% CI [.410, 1.423], p < .001), CT skills (Hedges’ g = .494, 95% CI [.389, .600], p < .001), and CT perspectives (Hedges’ g = .927, 95% CI [.039, 1.816], p < .05). (c) Additionally, game mode, teaching context, and participant characteristics have positive effects on CT. Based on the findings, it is suggested that using more unplugged games and video games, designing collaborative game activities, and tailoring approaches according to gender difference and programming experience can effectively promote CT. The results have significance for fostering students’ CT in GBL; it is further suggested that instruction processes be rationally designed.}
}
@article{doi:10.1177/0735633120967315,
author = {Nadia Parsazadeh and Pei-Yu Cheng and Ting-Ting Wu and Yueh-Min Huang},
title = {Integrating Computational Thinking Concept Into Digital Storytelling to Improve Learners’ Motivation and Performance},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {3},
pages = {470–495},
year = {2021f},
doi = {10.1177/0735633120967315},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120967315},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120967315},
abstract = {This paper examines a method which can be used by instructors pursuing innovative methods for language teaching, which expands learners’ motivation in second language learning. Computational thinking (CT) is a problem-solving skill which can motivate students’ English language learning. Designing a learning activity which integrates CT into English language learning has been considered in only a few academic studies. This study aimed to explore whether integrating CT into English language learning can be useful for improving learners’ motivation and performance. The method of “present, practice, and produce” was applied as a method of presenting computational thinking in the English language learning classroom. Fifty-two elementary school students (52) participated in the experimental study. Following an experimental design, data were collected and analyzed from a combination of knowledge test scores, storytelling, motivation, and anxiety surveys. The experimental results indicate that the CT strategy improves students’ language learning and raises their motivation in the two dimensions of extrinsic and intrinsic goal orientation. These results imply the positive effect of CT strategy on strengthening problem-solving skills of students participating in digital storytelling and increases their motivation and performance in English language learning.}
}
@article{doi:10.1177/0735633117743918,
author = {Yune Tran},
title = {Computational Thinking Equity in Elementary Classrooms: What Third-Grade Students Know and Can Do},
journal = {Journal of Educational Computing Research},
volume = {57},
number = {1},
pages = {3–31},
year = {2019g},
doi = {10.1177/0735633117743918},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633117743918},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633117743918},
abstract = {The Computer Science Teachers Association has asserted that computational thinking equips students with essential critical thinking which allows them to conceptualize, analyze, and solve more complex problems. These skills are applicable to all content area as students learn to use strategies, ideas, and technological practices more effectively as digital natives. This research examined over 200 elementary students’ pre- and posttest changes in computational thinking from a 10-week coding program using adapted lessons from code.org’s Blockly programming language and CSUnplugged that were delivered as part of the regular school day. Participants benefited from early access to computer science (CS) lessons with increases in computational thinking and applying coding concepts to the real world. Interviews from participants included examples of CS connections to everyday life and interdisciplinary studies at school. Thus, the study highlights the importance of leveraging CS access in diverse elementary classrooms to promote young students’ computational thinking; motivation in CS topics; and the learning of essential soft-skills such as collaboration, persistence, abstraction, and creativity to succeed in today’s digital world.}
}
@article{doi:10.1177/07356331231180951,
author = {Xinyue Wang and Mengmeng Cheng and Xinfeng Li},
title = {Teaching and Learning Computational Thinking Through Game-Based Learning: A Systematic Review},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {7},
pages = {1505–1536},
year = {2023h},
doi = {10.1177/07356331231180951},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231180951},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231180951},
abstract = {Computational thinking (CT) is considered a fundamental skill that everyone in the 21st century should have. Game-based learning (GBL) may be used to teach CT, and it’s necessary to clarify how to design and implement game-based CT teaching. The literature was systematically searched for empirical studies published between 2011 and 2021. Thirty-nine studies were included in the review and findings suggested that GBL has positive effects on CT, but has non-significant effects on some CT elements (e.g., conditions, triggers, and abstraction) because of limited time to learn these elements and students’ preferences for using CT elements. Game elements, particularly clear goals and rules, progressive challenges, immediate feedback, storyline, avatar, social interaction and various reward mechanisms were used to motivate students to engage in activities to develop CT. Furthermore, single or multiple theoretical foundations, such as constructivist learning theory and experiential learning theory, may guide the design and implementation of game-based activities. Problem-solving, project-based approaches were used to encourage students to use CT to solve problems or complete a project. Finally, guidelines for designing and implementing game-based learning activities for promoting CT were discussed.}
}
@article{doi:10.1177/21582440241249897,
author = {Ting-Ting Wu and Andik Asmara and Yueh-Min Huang and Intan Permata Hapsari},
title = {Identification of Problem-Solving Techniques in Computational Thinking Studies: Systematic Literature Review},
journal = {Sage Open},
volume = {14},
number = {2},
pages = {21582440241249896},
year = {2024i},
doi = {10.1177/21582440241249897},
URL = {https://doi-org.crai.referencistas.com/10.1177/21582440241249897},
eprint = {https://doi-org.crai.referencistas.com/10.1177/21582440241249897},
abstract = {Problem-solving skills are an ability that must be cultivated to equip students with the skills needed to deal with today’s increasingly complex and volatile environment. Computational thinking represents a new paradigm in problem-solving skills. After Wing proposed Computational Thinking as problem-solving skills in 2006, other scholars investigated this topic; nevertheless, the link between Computational Thinking and problem-solving has not been clearly discussed in previous studies. To uncover evidence for the connection between Computational Thinking and problem-solving skills, we conduct a systematic literature review of 37 papers collected from Web of Science database. The results indicate that (a) problem-solving is discussed in the 37 articles in the context of Computational Thinking, (b) the most frequently employed Computational Thinking stages in problem-solving skills are decomposition, pattern recognition, abstraction, and algorithm, (c) Computational Thinking is closely linked to problem-solving, and (d) Computational Thinking and problem-solving stages serve the same functions in solving problems. The results of this study will encourage the development of education research, particularly in the application of CT as a problem-solving tool in various real-life scenarios.}
}
@article{doi:10.1177/20965311231158393,
author = {Yimei Zhang (张艺美) and Annie Savard},
title = {Defining Computational Thinking as an Evident Tool in Problem-Solving: Comparative Research on Chinese and Canadian Mathematics Textbooks},
journal = {ECNU Review of Education},
volume = {6},
number = {4},
pages = {677–699},
year = {2023j},
doi = {10.1177/20965311231158393},
URL = {https://doi-org.crai.referencistas.com/10.1177/20965311231158393},
eprint = {https://doi-org.crai.referencistas.com/10.1177/20965311231158393},
abstract = {Purpose To analyze mathematics problem-solving (PS) procedures in Chinese (CH) and Canadian (CA) elementary mathematics textbooks that leverage computational thinking (CT) as a cognitive tool, which have evidently existed and been implemented. Design/Approach/Methods In this study, an analysis framework was developed to investigate the characteristics of CT tools for three PS steps—understand the problem, devise and conduct plans, and look back into textbooks—in four contexts: data practices, modeling and simulation practices, computational tools practices, and systemic thinking practices. Findings Our results demonstrate the tools (CT) employed in the PS process in CH and CA mathematics textbooks. The strong connections between the “look back” stage and CT tools were explored. During the “look back” stage, both countries required students to transfer their knowledge and perform generalization. In addition, CT is regarded as a basic skill analysis for students in mathematics education and has received significant attention at every stage of the PS process. Originality/Value This study brings a new perspective to CT research in education by regarding CT as a cognitive tool for students in mathematics PS.}
}

@article{doi:10.1177/07356331211004048,
author = {Evan David Ballard and Rachelle Haroldson},
title = {Analysis of Computational Thinking in Children’s Literature for K-6 Students: Literature as a Non-Programming Unplugged Resource},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {8},
pages = {1487–1516},
year = {2022a},
doi = {10.1177/07356331211004048},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211004048},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211004048},
abstract = {As schools and districts across the United States adopt computer science standards and curriculum for K-12 computer science education, they look to integrate the foundational concepts of computational thinking (CT) into existing core subjects of elementary-age students. Research has shown the effectiveness of teaching CT elements (abstraction, generalization, decomposition, algorithmic thinking, debugging) using non-programming, unplugged approaches. These approaches address common barriers teachers face with lack of knowledge, familiarity, or technology tools. Picture books and graphic novels present an unexplored non-programming, unplugged resource for teachers to integrate computational thinking into their CT or CT-integrated lessons. This analysis examines 27 picture books and graphic novels published between 2015 and 2020 targeted to K-6 students for representation of computational thinking elements. Using the computational thinking curriculum framework for K-6, we identify the grade-level competencies of the CT elements featured in the books compared to the books’ target age groups. We compare grade-level competencies to interest level to identify each CT element representation as “foundational,” “on-target,” or “advanced.” We conclude that literature offers teachers a non-programming unplugged resource to expose students to CT and enhance CT and CT-integrated lessons, while also personalizing learning based on CT readiness and interest level.}
}
@article{doi:10.1177/07356331231205052,
author = {Chih-Hung Chen and Hsiang-Yu Chung},
title = {Fostering Computational Thinking and Problem-Solving in Programming: Integrating Concept Maps Into Robot Block-Based Programming},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {1},
pages = {406–427},
year = {2024b},
doi = {10.1177/07356331231205052},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231205052},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231205052},
abstract = {Computational thinking (CT) has gained considerable attention and in-depth discussion over the last two decades. Although the significance of CT has been highlighted, it could be challenging for educators to teach CT. Fortunately, adopting robots in education has been evidenced to be of benefit to promoting students’ learning motivation, CT, and higher-order thinking skills. However, several significant factors affecting students’ programming performances in robot-assisted learning activities have been identified, such as cognitive needs and organization. In this study, a CMR-BBP (concept map robot block-based programming) approach was designed by integrating concept maps into robot block-based programming to enhance students’ programming learning. Moreover, a three-group experiment was carried out in an elementary school to evaluate their learning outcomes. The experimental results revealed that the CMR-BBP approach benefited the students’ perceptions of their computational thinking and problem solving in comparison with the R-BBP (robot block-based programming) and C-BBP (conventional block-based programming) approaches. Furthermore, regarding cognitive load, both the CMR-BBP and R-BBP approaches enhanced the students’ germane cognitive load, while the CMR-BBP approach effectively reduced their extrinsic cognitive load. This study could be a notable reference for designing other courses in conjunction with programming learning activities.}
}
@article{doi:10.1177/2347631120970177,
author = {B. Gopinath and R. Santhi},
title = {Development and Evaluation of Fishbone-Based Advanced Computational Thinking (FACT) Pedagogy: A Teacher-Student Collaborative Learning Environment in Engineering and Science Education},
journal = {Higher Education for the Future},
volume = {8},
number = {1},
pages = {108–122},
year = {2021c},
doi = {10.1177/2347631120970177},
URL = {https://doi-org.crai.referencistas.com/10.1177/2347631120970177},
eprint = {https://doi-org.crai.referencistas.com/10.1177/2347631120970177},
abstract = {In this article, Fishbone-based advanced computational thinking (FACT) pedagogy is proposed by fusing fishbone pedagogy and computational thinking pedagogy for enhancing teaching-learning process while teaching engineering and science courses, for engineering and science students respectively. The proposed FACT pedagogy has been implemented using the concept of X-ray machine in biomedical instrumentation course and biomolecules, in biochemistry course. Using fishbone approach, various components of X-ray machine in biomedical course and the components of biomolecules in biochemistry course are visually explained as ribs and riblets of a fishbone diagram, without coining the keywords X-ray and biomolecules in an engineering institution and science institution respectively. Finally, the targeted concept is arrived and explained. Similarly, the same concepts of X-ray and biomolecules are coined among students and they are asked to divide or decompose the concepts into sub-concepts separately. To implement and evaluate the proposed pedagogy, an engineering institution and a science institution have been selected and evaluation results have been published in this article. In this pedagogical approach, the same complex concept is taught as a backward thinking by the teacher using fishbone pedagogy and forward thinking by the students using computational thinking pedagogy. This combined approach helps students to understand any complex concept in science courses. Also, it helps the teachers to easily convey and embed the same among the student community while teaching science courses.}
}
@article{doi:10.1177/0735633120965919,
author = {Danial Hooshyar and Margus Pedaste and Yeongwook Yang and Liina Malva and Gwo-Jen Hwang and Minhong Wang and Heuiseok Lim and Dejan Delev},
title = {From Gaming to Computational Thinking: An Adaptive Educational Computer Game-Based Learning Approach},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {3},
pages = {383–409},
year = {2021d},
doi = {10.1177/0735633120965919},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120965919},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120965919},
abstract = {Educational games have been increasingly used to improve students’ computational thinking. However, most existing games have focused on the theoretical knowledge of computational thinking, ignoring the development of computational thinking skills. Moreover, there is a lack of integration of adaptivity into educational computer games for computational thinking, which is crucial to addressing individual needs in developing computational thinking skills. In this study, we present an adaptive educational computer game, called AutoThinking, for developing students’ computational thinking skills in addition to their conceptual knowledge. To evaluate the effects of the game, we conducted an experimental study with 79 elementary school students in Estonia, where the experimental group learned with AutoThinking, while the control group used a traditional technology-enhanced learning approach. Our findings show that learning with the adaptive educational computer game significantly improved students’ computational thinking related to both conceptual knowledge and skills. Moreover, students using the adaptive educational computer game showed a significantly higher level of interest, satisfaction, flow state, and technology acceptance in learning computational thinking. Implications of the findings are also discussed.}
}
@article{doi:10.1177/07356331241240670,
author = {Linlin Hu},
title = {Exploring Gender Differences in Computational Thinking Among K-12 Students: A Meta-Analysis Investigating Influential Factors},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1358–1384},
year = {2024e},
doi = {10.1177/07356331241240670},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241240670},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241240670},
abstract = {This study employs meta-analysis to synthesize findings from 30 articles investigating gender differences in computational thinking (CT) among K-12 students. Encompassing 51 independent effect sizes, the meta-analysis involves a participant pool of 9181 individuals from various countries, comprising 4254 males and 4927 females. Results indicate statistically significant gender differences in CT (Hedges’s g = 0.091, p < .05), albeit with a modest effect size, revealing higher CT scores among males compared to females. Further moderation analyses unveil the multifaceted nature of these gender differences. Specifically, while gender differences become significant during high school, recent studies suggest a gradual reduction in CT gender differences with societal progress among K-12 students. Moreover, findings illustrate variations in gender differences across geographical regions. Notably, while the overall gender disparity in CT is non-significant in the “East Asia and Pacific” region, it widens in “North America” and “Europe”, with males scoring higher than females. Conversely, in “Europe and Central Asia”, such gender differences present inconsistent outcomes, with females scoring higher than males. Importantly, assessment tool type does not significantly influence gender differences. Lastly, this study offers recommendations to address CT gender gaps, providing valuable insights for promoting gender equality in education.}
}
@article{doi:10.1177/07356331211027387,
author = {Eleni A. Kyza and Yiannis Georgiou and Andria Agesilaou and Markos Souropetsis},
title = {A Cross-Sectional Study Investigating Primary School Children’s Coding Practices and Computational Thinking Using ScratchJr},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {1},
pages = {220–257},
year = {2022f},
doi = {10.1177/07356331211027387},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211027387},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211027387},
abstract = {There are increasing calls to introduce computational thinking in schools; the arguments in favor call upon research suggesting that even kindergarten children can successfully engage in coding. This contribution presents a cross-sectional study examining the coding practices and computational thinking of fifty-one primary school children using the ScratchJr software; children were organized in two cohorts (Cohort 1: 6–9 years old; Cohort 2: 10–12 years old). Each cohort participated in a six-hour intervention, as part of a four-day summer club. During the intervention children were introduced to ScratchJr and were asked to collaboratively design a digital story about environmental waste management actions, thus adopting a disciplinary perspective to computational thinking. Data analyses examined children’s final artifacts, in terms of coding practices and the level of computational thinking demonstrated by each cohort. Furthermore, analysis of selected groups’ storyboard interviews was used to shed light on differences between the two cohorts. Results are presented and contrasted across the two age cohorts via a developmental perspective. The findings of this study can be useful in considering the instructional support that is necessary to scaffold the development of primary school children’s coding practices and computational thinking.}
}
@article{doi:10.1177/18344909211010240,
author = {Yan Li and Shan Xu and Jia Liu},
title = {Development and Validation of Computational Thinking Assessment of Chinese Elementary School Students},
journal = {Journal of Pacific Rim Psychology},
volume = {15},
number = { },
pages = {18344909211010240},
year = {2021g},
doi = {10.1177/18344909211010240},
URL = {https://doi-org.crai.referencistas.com/10.1177/18344909211010240},
eprint = {https://doi-org.crai.referencistas.com/10.1177/18344909211010240},
abstract = {Recent advances in artificial intelligence have brought attention to computational thinking (CT) in school education worldwide. However, little is known about the development of the literacy of CT in children, mainly because of the lack of proper psychometric assessments. We developed the first psychometrically validated assessment on the literacy of CT of children in Chinese elementary schools, coined as the Computational Thinking Assessment for Chinese Elementary Students (CTA-CES). Items were constructed to reflect key aspects of CT such as abstraction, algorithm thinking, decomposition, evaluation, and pattern recognition. To examine the test reliability and validity, we recruited two samples of 280 third- to sixth-grade students in total. Cronbach’s alpha provided evidence for the reliability of the test scores, item response theory analyses demonstrated psychometric appropriateness, whereas construct validity was verified by convergent validity, and criterion-related validity was confirmed by correlations between the CTA-CES and measures related to CT, namely reasoning, spatial ability, and verbal ability. In addition, an fMRI study further demonstrated similar neural activation patterns when students conducted the CTA-CES and programming tasks. Taken together, the CTA-CES is the first reliable and valid instrument for measuring the literacy of CT for Chinese children, and may be applicable to children worldwide.}
}
@article{doi:10.1177/07356331221100740,
author = {Zhuotao Lu and Ming M. Chiu and Yunhuo Cui and Weijie Mao and Hao Lei},
title = {Effects of Game-Based Learning on Students’ Computational Thinking: A Meta-Analysis},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {1},
pages = {235–256},
year = {2023h},
doi = {10.1177/07356331221100740},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221100740},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221100740},
abstract = {This meta-analysis determined game-based learning’s (GBL) overall effect on students’ computational thinking (CT) and tested for moderators, using 28 effect sizes from 24 studies of 2,134 participants. The random effects model results showed that GBL had a significant positive overall effect on students’ CT (g = 0.677, 95% confidence interval 0.532–0.821) with significant heterogeneity among effect sizes. Among game types, role-playing yielded the largest GBL effect size, followed by action, puzzles, and adventures. Moreover, the effect of GBL on CT was weaker among students in countries that were more individualistic than others. Lastly, interventions between four hours and one week showed the largest GBL effect size, followed by those over four weeks, up to four hours, and between one week and four weeks.}
}
@article{doi:10.1177/0735633121992479,
author = {William H. Stewart and Youngkyun Baek and Gina Kwid and Kellie Taylor},
title = {Exploring Factors That Influence Computational Thinking Skills in Elementary Students’ Collaborative Robotics},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {6},
pages = {1208–1239},
year = {2021i},
doi = {10.1177/0735633121992479},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633121992479},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633121992479},
abstract = {Recently educational robotics has expanded into curriculum beyond traditional STEM fields, and which can also be used to foster computational thinking (CT) skills. Prior research has shown numerous interdisciplinary benefits related to CT, however, these influential factors have often been investigated with relatively few variables. This study investigated factors that may lead to 4th and 5th grade elementary school students’ development of computational thinking skills in collaborative robotics activities by hypothesizing a model which proposed that a problem solving inventory, intrinsic motivation, and enjoyment were the main predictors of computational thinking skills. The model was then tested by surveying students with several psychometric inventories where a revised model was then constructed. The study found significant relationships between perceived competence and enjoyment, and learning motivation, and intrinsic motivation. Another important finding was that problem solving was a significant predictor of computational thinking skills. Results were interpreted with reference to implications for possible means of improving learning outcomes when using collaborative robotics in an educational setting.}
}
@article{doi:10.1177/07356331241249956,
author = {Stella Xin Yin and Dion Hoe-Lian Goh and Choon Lang Quek},
title = {Collaborative Learning in K-12 Computational Thinking Education: A Systematic Review},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {6},
pages = {1440–1474},
year = {2024j},
doi = {10.1177/07356331241249956},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241249956},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241249956},
abstract = {In the past decade, Computational Thinking (CT) education has received growing attention from researchers. Although many reviews have provided synthesized information on CT teaching and learning, few have paid particular attention to collaborative learning (CL) strategies. CL has been widely implemented in CT classes and has become the most popular pedagogy among educators. Therefore, a systematic review of CL in CT classes would provide practical guidance on teaching strategies to enhance CT interventions and improve the quality of teaching and learning, ultimately benefiting students’ CT skills development. To address this gap, this study examined 43 empirical studies that have applied CL strategies, ranging from 2006 to 2022. Several findings were revealed in the analysis. First, a wide range of theories and frameworks were applied to inform research questions, pedagogical design, and research methodologies. Second, despite the acknowledged importance of group composition in effective CL, a large number of studies did not provide details on how the students were grouped. Third, six types of CL activities and instructional designs have been identified in CT classrooms. The synthesized information provides valuable insights that can inform future research directions and guide the design and implementation of CL activities in future CT classes.}
}

@article{doi:10.1177/1476718X231175464,
author = {Kathleen Campana and J Elizabeth Mills},
title = {Playing, tinkering, and problem solving: Understanding early computational thinking in libraries and museums},
journal = {Journal of Early Childhood Research},
volume = {21},
number = {3},
pages = {369–383},
year = {2023a},
doi = {10.1177/1476718X231175464},
URL = {https://doi-org.crai.referencistas.com/10.1177/1476718X231175464},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1476718X231175464},
abstract = {Computational thinking (CT) has emerged as an important method in the United States for helping children learn to solve complex problems and develop skills necessary for coding and other computer science-related endeavors. Research has revealed that CT can be encouraged with children as young as 3–4 years of age. While some preschools and schools are incorporating CT into their curriculum for young children, ages 0–8 years, it is important to understand how environments outside of schools are using CT with young children, particularly given that, in the United States, a large percent of young children, ages 0–5 years, are not in formal school settings. This study provides insight into this area through 20 interviews with educators in libraries and museums to understand how they incorporate CT into their work with young children, ages 0–8 years, and their families. The interviews reveal that library and museum educators are using a variety of developmentally-appropriate approaches, such as play, experimentation, and narrative, to design and offer a diverse array of engaging, hands-on CT activities that allow young children to practice CT in child-centered, meaningful ways.}
}
@article{doi:10.3102/0013189X12463051,
author = {Shuchi Grover and Roy Pea},
title = {Computational Thinking in K–12: A Review of the State of the Field},
journal = {Educational Researcher},
volume = {42},
number = {1},
pages = {38–43},
year = {2013b},
doi = {10.3102/0013189X12463051},
URL = {https://doi-org.crai.referencistas.com/10.3102/0013189X12463051},
eprint = {https://doi-org.crai.referencistas.com/10.3102/0013189X12463051},
abstract = {Jeannette Wing’s influential article on computational thinking 6 years ago argued for adding this new competency to every child’s analytical ability as a vital ingredient of science, technology, engineering, and mathematics (STEM) learning. What is computational thinking? Why did this article resonate with so many and serve as a rallying cry for educators, education researchers, and policy makers? How have they interpreted Wing’s definition, and what advances have been made since Wing’s article was published? This article frames the current state of discourse on computational thinking in K–12 education by examining mostly recently published academic literature that uses Wing’s article as a springboard, identifies gaps in research, and articulates priorities for future inquiries.}
}
@article{doi:10.1177/0735633120964402,
author = {Servet Kılıç and Seyfullah Gökoğlu and Mücahit Öztürk},
title = {A Valid and Reliable Scale for Developing Programming-Oriented Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {2},
pages = {257–286},
year = {2021c},
doi = {10.1177/0735633120964402},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120964402},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120964402},
abstract = {In this research, a scale was developed to determine the programming-oriented computational thinking skills of university students. The participants were 360 students studying in various departments at different universities in Turkey for computer programming. The scale consists of 33 items under conceptual knowledge, algorithmic thinking, and evaluation subscale. While there was no significant difference between the students’ conceptual knowledge and algorithmic thinking skills, the evaluation skills of male students differed significantly compared to females. Programming experience has a significant effect on conceptual knowledge, algorithmic thinking, and evaluation. The algorithmic thinking skills of the students who have low, middle, and high-level programming experience differed significantly. In terms of the development of conceptual knowledge and evaluation skills, it was observed that students should have at least one year of programming experience, but this experience will not make a significant difference if it is four years or more. It is thought that this scale, which is structured for different applications (e.g., web, game, robot) and learning environments (e.g., text, block) within the framework of its programming capabilities (conceptual, semantic, strategic knowledge), will contribute significantly to the evaluation of computational thinking as programming oriented.}
}
@article{doi:10.1177/07356331211057819,
author = {Marc Lafuente Martínez and Olivier Lévêque and Isabel Benítez and Cécile Hardebolle and Jessica Dehler Zufferey},
title = {Assessing Computational Thinking: Development and Validation of the Algorithmic Thinking Test for Adults},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {6},
pages = {1436–1463},
year = {2022d},
doi = {10.1177/07356331211057819},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211057819},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211057819},
abstract = {This study describes the development and validation process of a computational thinking (CT) test for adults. The team designed a set of items and explored a subset of those through two qualitative pilots. Then, in order to provide validity evidence based on the test content, a team of 11 subject-matter experts coded the initial pool of items using two different systems of categories based on CT components and contents. Next, the items were piloted on a sample of 289 participants, 137 experts in CT, and 152 novices. After a series of confirmatory factor analyses, a unidimensional model that represents algorithmic thinking was adopted. Further analyzing the psychometric quality of the 27 items, 20 of them with excellent reliability indices were selected for the test. Thus, this study provides a tool to evaluate adults’ CT: the Algorithmic Thinking Test for Adults (ATTA), which was developed according to psychometric standards. This article also reflects on the nature of CT as a construct.}
}
@article{doi:10.1177/07356331241254575,
author = {Xinlei Li and Guoyuan Sang and Martin Valcke and Johan van Braak},
title = {The Development of an Assessment Scale for Computational Thinking Competence of In-Service Primary School Teachers},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {6},
pages = {1538–1567},
year = {2024e},
doi = {10.1177/07356331241254575},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241254575},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241254575},
abstract = {In the context of digital technologies, computational thinking (CT) is considered a key competence of primary school teachers. However, assessment tools to measure in-service teachers’ CT competence are rare. The current study explains the design, development, and validation of a scale to determine the in-service teachers’ mastery level of their Computational Thinking Competence (CTC) in the Chinese context. The validity and reliability of the scale have been studied by conducting exploratory factor analysis (EFA), confirmatory factor analysis (CFA) and calculating internal consistency coefficients. The sample of this study consisted of 631 in-service teachers from different Chinese primary schools (EFA N = 189; CFA N = 442). The 31-item scale mirrors five factors: cognitive knowledge of CT, practices and skills of CT, attitudes and perspectives of CT, CT teaching design, and CT teaching implementation. The discussion of the results looks at the future use of the CT scale in Chinese educational settings that mirror a specific national education policy, talent demand, and educational culture.}
}
@article{doi:10.1177/0735633120905605,
author = {Chrystalla Mouza and Yi-Cheng Pan and Hui Yang and Lori Pollock},
title = {A Multiyear Investigation of Student Computational Thinking Concepts, Practices, and Perspectives in an After-School Computing Program},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {5},
pages = {1029–1056},
year = {2020f},
doi = {10.1177/0735633120905605},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120905605},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120905605},
abstract = {In this work, we examine whether repeated participation in an after-school computing program influenced student learning of computational thinking concepts, practices, and perspectives. We also examine gender differences in learning outcomes. The program was developed through a school–university partnership. Data were collected from 138 students over a 2.5-year period. Data sources included pre–post content assessments of computational concepts related to programming in addition to computational artifacts and interviews with a purposeful sample of 12 participants. Quantitative data were analyzed using statistical methods to identify gains in pre- and post-learning of computational thinking concepts and examine potential gender differences. Interview data were analyzed qualitatively. Results indicated that students made significant gains in their learning of computational thinking concepts and that gains persisted over time. Results also revealed differences in learning of computational thinking concepts among boys and girls both at the beginning and end of the program. Finally, results from student interviews provided insights into the development of computational thinking practices and perspectives over time. Results have implications for the design of after-school computing programs that help broaden participation in computing.}
}
@article{doi:10.1177/10567879221076077,
author = {Papadakis Stamatios},
title = {Can Preschoolers Learn Computational Thinking and Coding Skills with ScratchJr? A Systematic Literature Review},
journal = {International Journal of Educational Reform},
volume = {33},
number = {1},
pages = {28–61},
year = {2024g},
doi = {10.1177/10567879221076077},
URL = {https://doi-org.crai.referencistas.com/10.1177/10567879221076077},
eprint = {https://doi-org.crai.referencistas.com/10.1177/10567879221076077},
abstract = {Computational Thinking (CT) and the understanding of how programs are being executed is internationally acknowledging as a necessity for today’s students and citizens of tomorrow. Despite the multifaceted nature of CT, the introduction of CT and associate concepts such as coding is regarded as developmental acceptable for preschool and kindergarten children. For a decade, there has been a focus on educational reform in the form of educational apps. For young children, an influx of mobile apps offering various interfaces and styles promote themselves as having educational value to introduce children aged 5–7 to essential CT, coding, and problem-solving skills. On the contrary, little is known about the educational value of these apps. The fast pace at which developers produce these apps and the breadth of the available apps have gone beyond what it is reasonable for researchers and experts in the domain to evaluate. This article presents a literature review on how the ScratchJr app affects young children’s CT, coding, and general literacy skills. The literature review includes 18 studies. The main conclusion is that although ScratchJr is not a panacea, it seems to be a helpful app that positively affects children’s CT and coding skills.}
}
@article{doi:10.1177/0735633120978530,
author = {Shenghua Zha and Debra A. L. Morrow and Jennifer Curtis and Shane Mitchell},
title = {Learning Culture and Computational Thinking in a Spanish Course: A Development Model},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {5},
pages = {844–869},
year = {2021h},
doi = {10.1177/0735633120978530},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120978530},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120978530},
abstract = {Computer science and computational thinking (CT) education in K-12 schools have been escalating in recent years. A couple of CT instructional models have been proposed to depict the roles of CT in K-16 education. Yet, neither of them discussed CT infusion into a subject course. In this article, we proposed a CT-integration model called TPC2T. In this model, we suggested considering CT as a second subject and using an appropriate technological pedagogical approach to make students’ learning of two subjects meaningful and engaging. We implemented this model in a CT-integrated lesson in two sections of a high-school Spanish course. Students worked in small groups and coded three small and one comprehensive digital Spanish-culture stories in Scratch. Results showed that students taking the CT-integrated lesson had the same degree of improvement in their Spanish culture knowledge as their peers who did not take the CT-integrated lesson. Besides, students taking the CT-integrated lesson had a significant improvement in their CT knowledge. At the same time, their CT self-efficacy outperformed those who did not take the CT-integrated lesson. We discussed the results and offered suggestions for researchers and educators at the end of the article.}
}
@article{doi:10.1177/0735633121994070,
author = {Yanjun Zhang and Ronghua Luo and Yijin Zhu and Yuan Yin},
title = {Educational Robots Improve K-12 Students’ Computational Thinking and STEM Attitudes: Systematic Review},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {7},
pages = {1450–1481},
year = {2021i},
doi = {10.1177/0735633121994070},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633121994070},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633121994070},
abstract = {Due to the interdisciplinary nature of robotics, more and more attention has been paid to its effectiveness in the field of education in recent years. This systematic review evaluated existing studies in improving K-12 students’ computational thinking and STEM attitudes. Research articles published between 2010 and 2019 were collated from major databases according to six criteria, and 17 studies were eligible. A meta-analysis was conducted to evaluate the effectiveness of educational robots in terms of standardized mean differences (SMD) or mean differences (MD) of test scores as outcome measures. The overall effect size was medium (SMD = 0.46, 95% CI: 0.23–0.69). Subgroup analysis found that some groups to have better effectiveness. Specifically, the effect of STEM attitudes (SMD = 0.01) was smaller than computational thinking (SMD = 0.48). Educational robots had more significant effect on boys (MD = 0.39) than girls (MD = 0.27). The effect in primary school (SMD = 0.27) was higher than in middle school (SMD = 0.04), and the effect was great on short-term instruction with educational robots (SMD = 0.35). Based on these results, the study makes some recommendations for educators about strengthening the influence of educational robots on STEM attitudes, improving the persistence of their learning effects, and further exploring their application models.}
}
@article{doi:10.1177/0735633115608444,
author = {Baichang Zhong and Qiyun Wang and Jie Chen and Yi Li},
title = {An Exploration of Three-Dimensional Integrated Assessment for Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {53},
number = {4},
pages = {562–590},
year = {2016j},
doi = {10.1177/0735633115608444},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633115608444},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633115608444},
abstract = {Computational thinking (CT) is a fundamental skill for students, and assessment is a critical factor in education. However, there is a lack of effective approaches to CT assessment. Therefore, we designed the Three-Dimensional Integrated Assessment (TDIA) framework in this article. The TDIA has two aims: one was to integrate three dimensions (directionality, openness, and process) into the design of effective assessment tasks; and the other was to assess comprehensively the three dimensions of CT including computational concepts, practices, and perspectives. Guided by the TDIA framework, we designed three pairs of tasks: closed forward tasks and closed reverse tasks, semiopen forward tasks and semiopen reverse tasks, and open tasks with a creative design report and open tasks without a creative design report. To further confirm each task’s applicability and its advantages and disadvantages, we conducted a test experiment at the end of the autumn semester in 2014 in a primary school for 3 weeks. The results indicated that (a) the reverse tasks were not more superior than the forward tasks; (b) the semiopen tasks and the open tasks were more effective than the closed tasks, and the semiopen tasks had higher difficulty and discrimination than the others; (c) the self-reports provided a helpful function for learning diagnosis and guidance; (d) the scores had no significant difference between the schoolboys and the schoolgirls in all six tasks; and (e) the six tasks’ difficulty and discrimination were all acceptable, and the semiopen tasks had higher difficulty and discrimination than the others. To effectively apply them, the following suggestions for teachers to design computational tasks are proposed: motivating students’ interest and enthusiasm, incorporating semifinished artifacts, involving learning diagnosis and guidance, and including multiple types of tasks in an assessment.}
}

@article{doi:10.1177/07356331231165099,
author = {Yousri Attia Mohamed Abouelenein and Mohamed Ali Nagy Elmaadaway},
title = {Impact of Teaching a Neuro-Computerized Course Through VLE to Develop Computational Thinking Among Mathematics Pre-service Teachers},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {6},
pages = {1175–1206},
year = {2023a},
doi = {10.1177/07356331231165099},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231165099},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231165099},
abstract = {The current study aims to determine the effect of teaching a mechanic neuro-computerized course through virtual learning environments (VLE) to develop computational thinking among mathematics pre-service teachers. The neuro-computerized virtual learning environments (NCVLE) model was designed to be used to teach the mechanics course to third-year students of the mathematics department. To achieve the targeted learning outcomes, the study recruited (102) third-year students of the Faculty of Education and classified them into a control group of (50) students and an experimental group of (52) students. The experiment lasted for 14 weeks during one semester of the 2021-2022 academic year. The results agreed with most of what has been found from relevant literature and studies. Also, the results indicated that the NCVLE model played a vital role in the purposeful teaching, learning, and assessment processes and enhanced the learning of computational thinking.}
}
@article{doi:10.1177/07356331221098793,
author = {Shiau-Wei Chan and Chee-Kit Looi and Weng Kin Ho and Mi Song Kim},
title = {Tools and Approaches for Integrating Computational Thinking and Mathematics: A Scoping Review of Current Empirical Studies},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {8},
pages = {2036–2080},
year = {2023b},
doi = {10.1177/07356331221098793},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221098793},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221098793},
abstract = {The importance of computational thinking (CT) as a 21st-century skill for future generations has been a key consideration in the reforms of many national and regional educational systems. Much attention has been paid to integrating CT into the traditional subject classrooms. This paper describes a scoping review of learning tools for integrating CT and mathematics in current empirical studies published from 2015 to 2021. The review showed that most of the studies implemented CT-intensive Math-connected integration. Five major types of CT tools had been identified, i.e., digital tangibles, apps and games, programming languages, formative or summative assessments, and other technological tools. In many instances, the tools also provide functions of assessment of CT skills. The most assessed CT competencies were including algorithms and algorithmic thinking, abstraction, testing and debugging, loops, and sequences. Geometry and Measurement was the most assessed mathematics topic. Our scoping review is beneficial in the investigation of the literature on CT and mathematics education, as well as guides those who are interested in developing curriculum, programs, or assessments that involve the integration of CT and mathematics.}
}
@article{doi:10.1177/07356331221114183,
author = {Li Cheng and Xiaoman Wang and Albert D. Ritzhaupt},
title = {The Effects of Computational Thinking Integration in STEM on Students’ Learning Performance in K-12 Education: A Meta-analysis},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {2},
pages = {416–443},
year = {2023c},
doi = {10.1177/07356331221114183},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221114183},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221114183},
abstract = {Computational thinking is believed to be beneficial for Science, Technology, Engineering, and Mathematics (STEM) learning as it is closely related to many other skills required by STEM disciplines. There has been an increasing interest in integrating computational thinking into STEM and many studies have been conducted to examine the effects of this intervention. This meta-analysis examined the effects of computational thinking integration in STEM on students’ STEM learning performance in the K-12 education context. Following systematic procedures, we identified 20 publications with 21 studies meeting the inclusion and exclusion criteria from a range of academic databases. We extracted effect sizes on student learning outcomes in one-group pretest-posttest designs. We also examined a range of moderating variables in the models, including student levels, STEM disciplines, intervention durations, alignment with content standards (e.g., CSTA/NGSS), types of intervention (e.g., simulation), and the use of unplugged/plugged activities. Overall, we found a statistically significant large effect size (g = 0. 85 [95% CI of 0.57–1.14]; p < .001), indicating a large overall effect of computational thinking integration on STEM learning outcomes. The effect sizes were significantly moderated by intervention durations. We provide a discussion of the findings and present implications for future research and practice.}
}
@article{doi:10.1177/07356331211055379,
author = {Ndudi O. Ezeamuzie and Jessica S.C. Leung and Fridolin S.T. Ting},
title = {Unleashing the Potential of Abstraction From Cloud of Computational Thinking: A Systematic Review of Literature},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {4},
pages = {877–905},
year = {2022d},
doi = {10.1177/07356331211055379},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211055379},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211055379},
abstract = {Although abstraction is widely understood to be one of the primary components of computational thinking, the roots of abstraction may be traced back to different fields. Hence, the meaning of abstraction in the context of computational thinking is often confounded, as researchers interpret abstraction through diverse lenses. To disentangle these conceptual threads and gain insight into the operationalisation of abstraction, a systematic review of 96 empirical studies was undertaken. Analysis revealed that identifying features of entities, extracting relevant features, discovering patterns, creating rules and assembling the parts together were the core actions of abstraction. With the primary aim of simplifying practical procedures, abstraction was operationalised as the sophistication of a program, the matching of patterns, the creation of alternative representations, the transfer of solutions, the measurement of a learner’s activity and reading program codes. There is an obvious need for researchers to align the conceptual meanings they have established of abstraction with the practical facts of operationalisation. The need to empirically validate emerging models and the implications for future research are discussed.}
}
@article{doi:10.1177/07356331211060470,
author = {Jian-Wen Fang and Dan Shao and Gwo-Jen Hwang and Shao-Chen Chang},
title = {From Critique to Computational Thinking: A Peer-Assessment-Supported Problem Identification, Flow Definition, Coding, and Testing Approach for Computer Programming Instruction},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {5},
pages = {1301–1324},
year = {2022e},
doi = {10.1177/07356331211060470},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211060470},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211060470},
abstract = {Scholars believe that computational thinking is one of the essential competencies of the 21st century and computer programming courses have been recognized as a potential means of fostering students’ computational thinking. In tradition instruction, PFCT (problem identification, flow definition, coding, and testing) is a commonly adopted procedure to guide students to learn and practice computer programming. However, without further guidance, students might focus on learning the syntax of computer programming language rather than the concept of solving problems. This study proposes a peer-assessment-supported PFCT (PA-PFCT) approach for boosting students’ computer programming knowledge and computational thinking awareness. A quasi-experiment was conducted on a computer programming course in a high school to evaluate its influence on students’ learning achievement, computational thinking awareness, learning motivation, and self-efficacy. An experimental group of 51 students learned with the proposed approach, while a control group of 49 students learned with the traditional PFCT (T-PFCT) approach. The experimental results show that the proposed approach significantly enhanced the students’ computational thinking awareness, learning motivation, and self-efficacy, while not having significant impacts on their computer programming knowledge test scores.}
}
@article{doi:10.1177/27527263231181963,
author = {Xiaoxuan Fang and Davy Tsz Kit Ng and Wing Tung Tam and Manwai Yuen},
title = {Integrating computational thinking into primary mathematics: A case study of fraction lessons with Scratch programming activities},
journal = {Asian Journal for Mathematics Education},
volume = {2},
number = {2},
pages = {220–239},
year = {2023f},
doi = {10.1177/27527263231181963},
URL = {https://doi-org.crai.referencistas.com/10.1177/27527263231181963},
eprint = {https://doi-org.crai.referencistas.com/10.1177/27527263231181963},
abstract = {We presented a design-based study within the context of a four-session Scratch programming activity among 23 fourth-grade students in Hong Kong. Inspired by the computational thinking (CT) strategies and the 5E instructional model, we investigated students’ mathematical learning of fractions in a Scratch (block-based programming) environment. Students developed CT concepts, practices, and perspectives by building a “fraction magic calculator” in groups. This study analyzed the lesson design, students’ drawings, interviews, and work expressing their mathematical understanding of fractions in Scratch applications. The learning tasks were designed to support the students’ fraction learning and utilized computational abstractions in the form of variables, functions, and iterations to formulate mathematical models in a programming context. Students’ artifacts and feedback showed they were interested in learning fractions in a programming learning context, contributing to exercising and improving their fraction concepts and CT. Ultimately, we emphasized the benefits of CT integrated into mathematics education, promoting students’ understanding of fraction concepts, a set of CT abilities (concepts, practices, perspectives), and learning motivation. Moreover, we suggested a set of non-cognitive skills (e.g., socializing, expressing) to enrich the CT perspectives in the framework and show the importance of developing coding communities to co-create digital artifacts among learners. Overall, we highlighted that mathematics teachers should apply and create learning tasks that promote computational thinking to forge mathematical ideas and thinking.}
}
@article{doi:10.1177/09610006221084126,
author = {Mega Subramaniam and Nitzan Koren and Shandra Morehouse and David Weintrop},
title = {Capturing computational thinking in public libraries: An examination of assessment strategies, audience, and mindset},
journal = {Journal of Librarianship and Information Science},
volume = {55},
number = {2},
pages = {358–370},
year = {2023g},
doi = {10.1177/09610006221084126},
URL = {https://doi-org.crai.referencistas.com/10.1177/09610006221084126},
eprint = {https://doi-org.crai.referencistas.com/10.1177/09610006221084126},
abstract = {This study examines the current state of assessment of computational thinking (CT) programming in public libraries in the United States. In particular, this study identifies the assessment tools and strategies that public library staff use to evaluate the success of CT youth programming, as well as how they share these assessment results, what they share, and with whom. This work also examines the perceptions of library staff on assessment of CT learning in libraries. Through our work, we highlight the need for a change of mindset in the perception of library staff toward assessment of CT learning in libraries. We also demonstrate the need for suitable assessment strategies to measure learning in CT programming in libraries beyond attendance and retention, that communicate to library staff on how they can revise their programs and to share their program impact with library stakeholders who make decisions on budget and resource allocations.}
}
@article{doi:10.1177/07356331211035182,
author = {Lihui Sun and Linlin Hu and Danhua Zhou},
title = {Single or Combined? A Study on Programming to Promote Junior High School Students’ Computational Thinking Skills},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {2},
pages = {283–321},
year = {2022h},
doi = {10.1177/07356331211035182},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211035182},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211035182},
abstract = {In this work, we studied the influence of different programming approaches on the development of students’ computational thinking (CT) skills, the programming experience and gender differences in CT development were also discussed. A total of 158 junior high school students and one teacher participated in the study over 5 months. The sample students were divided into four experimental groups in four single or combined programming approaches (i.e., plugged-in, unplugged, unplugged first, and plugged-in first) and one control group without programming. Data sources included the results of four CT tests, as well as interviews with the teacher and surveys with 24 representative participants. The results showed that the four programming approaches can effectively improve students’ CT skills and can be retained after two months. Among them, the form of implementing unplugged activities before plugged-in can most effectively improve CT skills, and can better weaken the impact of previous programming experience. Finally, the qualitative analysis results provided insights into the process of programming and CT education. These findings will provide implications for the introduction of CT in junior high school, and help expand students’ participation in computing.}
}
@article{doi:10.1177/07356331241236744,
author = {Xiaowen Wang and Kan Kan Chan and Qianru Li and Shing On Leung},
title = {Do 3–8 Years Old Children Benefit From Computational Thinking Development? A Meta-Analysis},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1182–1208},
year = {2024i},
doi = {10.1177/07356331241236744},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241236744},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241236744},
abstract = {The interest in Computational Thinking (CT) development among young learners increases with the number of studies located in literature. In this study, a meta-analysis was conducted to address two main objectives: (a) the effectiveness of empirical interventions on the development of CT in children aged of 3–8 years; and (b) the variables that influence the effectiveness of the interventions. Following PRISMA procedures, we identified 17 empirical studies with 34 effect sizes and 1665 participants meeting the inclusion criteria from Web of Science database. Overall, we found a statistically significant large effect size (d = .83 [95% CI: 730, .890]; p < .001) on the CT development of 3–8 years old children, which provides empirical support for having young children to engage in CT experiences. The effect size was significantly influenced by moderating variables including gender, scaffolding, and education level. Intervention length showed a marginally significant effect. Therefore, educators could refer to the significant moderators when designing tailored interventions for CT development in early childhood education while a call for more empirical studies of CT development in young children is proposed.}
}
@article{doi:10.1177/07356331211057143,
author = {Zehui Zhan and Wenchang He and Xitian Yi and Shuyao Ma},
title = {Effect of Unplugged Programming Teaching Aids on Children’s Computational Thinking and Classroom Interaction: with Respect to Piaget’s Four Stages Theory},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {5},
pages = {1277–1300},
year = {2022j},
doi = {10.1177/07356331211057143},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211057143},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211057143},
abstract = {This paper examined the effect of the Unplugged Programming Teaching Aids (UPTA) on students’ computational thinking and classroom interaction. A set of UPTA was created and used in a primary school in southern China. A total of 48 students aged 6–8 were assigned to two classes, with the same instructor and learning materials, but only the treatment group was provided with the UPTA. Both groups were tested on computational thinking ability, children’s concrete operation status, degree of ego-centricity, and in-classroom interaction. Results indicated that the children aged 6–8 years old could classify things according to two kinds of criteria at the same time, but their cognitive style was still ego-centered and they found it difficult to deal with problems from a third-party perspective, no matter whether in the treatment group or the control group. However, students in the treatment group achieved significantly higher scores on the test of computational thinking and were more engaged in the classroom interaction patterns. These findings provide evidence of the positive effect of the UPTA on promoting children’s computational thinking by guiding them to decompose and solve problems, as well as enhancing their interaction and communication in the classroom, so as to transform from simple imitation to collaborative inquiry.}
}

@article{doi:10.1177/0735633119872908,
author = {Pao-Nan Chou},
title = {Using ScratchJr to Foster Young Children’s Computational Thinking Competence: A Case Study in a Third-Grade Computer Class},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {3},
pages = {570–595},
year = {2020a},
doi = {10.1177/0735633119872908},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633119872908},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633119872908},
abstract = {This study investigated young children’s computational thinking (CT) development by integrating ScratchJr into a programming curriculum. Twelve third graders (six males and six females) voluntarily participated in an experiment-based computer class conducted at a public elementary school in Taiwan. This study adopted a case study methodology to investigate research questions in one specific case (8-week CT educational training). A one-group quasi-experimental pretest and posttest design with the support of qualitative observation was used to examine four research topics: CT competence progress, programming behaviors in a CT framework, factors influencing CT competence, and learning responses to CT training. The quantitative results indicated that students immersing in weekly programming projects significantly improved in terms of their CT competence, which was mostly retained 1 month after completion of the class. The programming behaviors indicated that students’ CT concepts (sequence, event, and parallelism) and practice (testing and debugging as well as reusing and remixing) significantly improved. Moreover, parents’ active involvement in take-home assignments influenced students’ long-term CT competence retention. The qualitative results indicated that students enjoyed using tablet computers to learn ScratchJr programming and demonstrated various leaning behaviors in a three-stage instructional design model.}
}
@article{doi:10.1177/0022487117732317,
author = {Jacqueline Leonard and Monica Mitchell and Joy Barnes-Johnson and Adrienne Unertl and Jill Outka-Hill and Roland Robinson and Carla Hester-Croff},
title = {Preparing Teachers to Engage Rural Students in Computational Thinking Through Robotics, Game Design, and Culturally Responsive Teaching},
journal = {Journal of Teacher Education},
volume = {69},
number = {4},
pages = {386–407},
year = {2018b},
doi = {10.1177/0022487117732317},
URL = {https://doi-org.crai.referencistas.com/10.1177/0022487117732317},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0022487117732317},
abstract = {This article examines teacher preparation and teacher change in engineering and computer science education. We examined culturally responsive teaching self-efficacy (CRTSE), culturally responsive teaching outcome expectancy (CRTOE) beliefs, and attitudes toward computational thinking (CT) as teachers participated in one of three treatment groups: robotics only, game design only, or blended robotics/game design. Descriptive data revealed that CRTSE gain scores were higher in the robotics only and blended contexts than in the game design only context. However, CRTOE beliefs were consistent across all treatment groups. In regard to CT attitudes, teachers’ gain scores were higher in the game design only and blended contexts than in the robotics only context. In addition, there were differences by treatment group related to STEM (science, technology, engineering, and mathematics) practices, while cultural artifacts were evident in each learning environment. The results of this study reveal some variability by treatment type and inform future research on equitable practices in engineering and computer science education.}
}
@article{doi:10.1177/07356331221121106,
author = {Mohd Kamal Othman and Syazni Jazlan and Fatin Afiqah Yamin and Shaziti Aman and Fitri Suraya Mohamad and Nurfarahani Norman Anuar and Abdulrazak Yahya Saleh and Ahmad Azaini Abdul Manaf},
title = {Mapping Computational Thinking Skills Through Digital Games Co-Creation           Activity Amongst Malaysian Sub-urban Children},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {2},
pages = {355–389},
year = {2023c},
doi = {10.1177/07356331221121106},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221121106},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221121106},
abstract = {This study investigates how digital game co-creation promotes Computational Thinking (CT) skills among children in sub-urban primary schools. Understanding how CT skills can be fostered in learning programming concepts through co-creating digital games is crucial to determine instructional strategies that match the young students’ interests and capacities. The empirical study has successfully produced a new checklist that can be used as a tool to describe the learning of CT skills when children co-create digital games. The checklist consists of 10 core CT skills: abstraction, decomposition, algorithmic thinking, generalisation, representation, socialisation, code literacy, automation, coordination, and debugging. Thirty-six 10–12 year-olds from sub-urban primary schools in Borneo participated in creating games in three separate eight-hour sessions. In addition, one pilot session with five participants was conducted. The game co-creation process was recorded to identify and determine how these young, inexperienced, untrained young learners collaborated while using CT skills. Analysis of their narratives while co-creating digital games revealed a pattern of using CT while developing the games. Although none of the groups demonstrated the use of all ten CTs, conclusively, all ten components of the CT were visibly present in their co-created digital games.}
}
@article{doi:10.1177/07356331231210946,
author = {Nikolaos Pellas},
title = {Assessing Computational Thinking, Motivation, and Grit of Undergraduate Students Using Educational Robots},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {2},
pages = {620–644},
year = {2024d},
doi = {10.1177/07356331231210946},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231210946},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231210946},
abstract = {Educational technologists and practitioners have made substantial strides in developing affordable digital and tangible resources to support both formal and informal computer science instruction. However, there is a lack of research on practice-based assignments, such as Internet of Things (IoT) projects, that allow undergraduate students to design and demonstrate educational robots using digital or physical assistance, especially when it comes to computational thinking (CT) and programming skills development in association with their psycho-emotional experience. This study compares the impact of Scratch and LEGO® WeDo robotic kits on students’ CT and programming skills development. A quasi-experimental approach was conducted, involving two hundred forty-six participants (n = 246), who were equally divided between Scratch and LEGO® WeDo groups. Results indicate that the LEGO® WeDo group showed greater improvement in CT and programming skills development, while designing and presenting IoT projects. Nevertheless, no significant association between motivation, grit, and CT skills was observed. The findings highlight the potential of tangible robotics in facilitating students’ hands-on learning and enhancing motivation to foster CT and programming skills. This study provides a wide range of implications for instructional designers on how to use tangible robotics to support hands-on IoT projects in computer science courses.}
}
@article{doi:10.1177/07356331241227793,
author = {Chen Sun and Stephanie Yang and Betsy Becker},
title = {Debugging in Computational Thinking: A Meta-analysis on the Effects of Interventions on Debugging Skills},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {4},
pages = {1087–1121},
year = {2024e},
doi = {10.1177/07356331241227793},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241227793},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241227793},
abstract = {Computational thinking (CT), an essential 21st century skill, incorporates key computer science concepts such as abstraction, algorithms, and debugging. Debugging is particularly underrepresented in the CT training literature. This multi-level meta-analysis focused on debugging as a core CT skill, and investigated the effects of various debugging interventions. Moderator analyses revealed which interventions were effective, in which situations, and for what kind of learner. A significant overall mean effect of debugging interventions ( = 0.64, CI = (0.32, 0.96), p < .001), was found based on 62 effect sizes from 18 source articles. Significant between-studies variation indicated that true effects could range from −0.54 to 1.82. In addition, sensitivity analyses and checks on confounding provided further understandings of intervention features and their impacts. Interventions using enhanced debuggers and systematic instruction were particularly effective in fostering debugging skills. Debugging intervention effects varied by participant population and potentially by publication type. Moreover, debugging interventions had impact regardless of how debugging skills were measured, programming medium used, control-group type, and whether the study was randomized. Future studies should investigate the best practices for improving debugging abilities for whom and under what circumstances.}
}
@article{doi:10.1177/07356331231204653,
author = {Dan Sun and Chengcong Zhu and Fan Xu and Yan Li and Fan Ouyang and Miaoting Cheng},
title = {Transitioning From Introductory to Professional Programming in Secondary Education: Comparing Learners’ Computational Thinking Skills, Behaviors, and Attitudes},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {3},
pages = {647–674},
year = {2024f},
doi = {10.1177/07356331231204653},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231204653},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231204653},
abstract = {Although previous research has provided some insights into the effects of block-based and text-based programming modalities, there is a dearth of a detailed, multi-dimensional analysis of the transition process from different introductory programming modalities to professional programming learning. This study employed a quasi-experimental design to address this gap, involving 64 secondary school students in two groups. For the beginning five weeks, the first group used an introductory block-based programming environment, while the second group used an introductory text-based programming environment. Then, both groups transitioned to professional text-based programming for the subsequent eight weeks. The results showed that participants who transitioned from introductory text-based programming to professional text-based programming (1) significantly outperformed in computational thinking skills; (2) had more code-writing and debugging behaviors and fewer irrelevant behaviors, and (3) had more interactions with the instructor. No significant differences were observed between the two groups regarding enjoyment, confidence, and interest in programming. Drawing on these findings, this study proposes pedagogical implications that could facilitate the adoption of programming modalities within the broader context of STEM education.}
}
@article{doi:10.1177/07356331231225269,
author = {Lihui Sun and Junjie Liu},
title = {Effects of Gamified Python Programming on Primary School Students’ Computational Thinking Skills: A Differential Analysis of Gender},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {3},
pages = {846–874},
year = {2024g},
doi = {10.1177/07356331231225269},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231225269},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231225269},
abstract = {Computational thinking (CT), as a new future-oriented literacy, has gained attention at the basic education level. Graphical programming is the common way to develop CT in primary students, but this drag-and-drop programming may weaken students’ understanding of programming’s abstract concepts and code logic. Text-based programming approaches can solve the problems faced by graphical programming, but few studies have explored the impact of text-based programming on CT. Therefore, we conducted a quasi-experimental study with 98 6th graders to explore the impact of gamified Python programming on CT. The findings showed that CT skills, as well as abstraction and decomposition, pattern recognition and evaluation in CT sub-skills, were significantly higher with students in the experimental group than in the control group. Furthermore, we found that gamified Python programming enabled boys and girls to reach the same level of CT skills. However, in terms of CT sub-skills, we found that gamified Python programming was more beneficial to the development of pattern recognition and evaluation skills for boys and abstraction and decomposition skills for girls. This demonstrated the effectiveness of gamified Python programming to improve primary students’ CT skills while clarifying the impact of gender and enriching research in the field of text-based programming.}
}
@article{doi:10.1177/07356331211051043,
author = {Meng-Jung Tsai and Francis Pingfan Chien and Silvia Wen-Yu Lee and Chung-Yuan Hsu and Jyh-Chong Liang},
title = {Development and Validation of the Computational Thinking Test for Elementary School Students (CTT-ES): Correlate CT Competency With CT Disposition},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {5},
pages = {1110–1129},
year = {2022h},
doi = {10.1177/07356331211051043},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211051043},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211051043},
abstract = {This study aimed to develop the Computational Thinking Test for Elementary School Students (CTT-ES) to assess young children’s CT competencies in non-programming contexts and also examine the relationship between CT competencies and CT dispositions. A survey including a pool of CTT-ES candidate items and the Computational Thinking Scale (CTS) was administered to 631 elementary school students. Rasch model of the Item Response Theory and the discrimination analysis of the Classical Testing Theory were conducted for item analyses. Pearson’s correlation analyses and hierarchical multiple regression analyses were used to examine the relationships between CTT-ES and CTS scores. The results showed that the final CTT-ES including 16 items had a good fitness, discrimination, and reliability to evaluate elementary students’ domain-general CT competencies. The convergent validity of CTT-ES was confirmed by its significant correlations with the CTS scores. The significant regression model not only showed students’ CT competencies can be predicted by their CT dispositions but also supported The Developmental Model of CT. This study provided a valid and reliable tool for assessing young children’s CT abilities. It also furthered our understanding about the developmental orders of CT abilities and contributed to the theoretical construction of CT.}
}
@article{doi:10.1177/07356331211039961,
author = {Ting-Ting Wu and Jian-Ming Chen},
title = {Combining Webduino Programming With Situated Learning to Promote Computational Thinking, Motivation, and Satisfaction Among High School Students},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {3},
pages = {631–660},
year = {2022i},
doi = {10.1177/07356331211039961},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211039961},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211039961},
abstract = {Many countries have incorporated computational thinking (CT) and programming languages into their science and technology courses. Students can improve their CT ability by learning programming languages. Moreover, situated learning enables students to generate knowledge and master problem-solving skills through interaction with situations. This study incorporated Webduino learning and the situated learning strategy into a programming course and analyzed its impact on high school students’ CT ability, learning motivation, and course satisfaction. A quasi-experimental research method was adopted, wherein the experimental group was subjected to the situated learning strategy and the control group was subjected to a traditional teaching method. The study results revealed that integrating Webduino programming with situated learning could effectively improve five categories of CT skills; moreover, the activity models of situated learning enhanced the value and expectation dimensions of learning motivation. In addition, satisfaction with the course content and self-identity slightly improved. However, because teachers were required to elaborate on stories to promote learner engagement with life situations, the time available for programming was limited. Thus, no significant difference was observed in teaching satisfaction.}
}
@article{doi:10.1177/07356331241268474,
author = {Ruijie Zhou and Chong Xie and Xiuling He and Yangyang Li and Qiong Fan and Ying Yu and Zhonghua Yan},
title = {Effect of Different Flow Design Approaches on Undergraduates’ Computational Thinking During Pair Programming},
journal = {Journal of Educational Computing Research},
volume = {0},
number = {0},
pages = {07356331241268474},
year = {2024j},
doi = {10.1177/07356331241268474},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241268474},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241268474},
abstract = {Computational thinking (CT), an essential competency for comprehending and addressing intricate issues in the digital world, has been incorporated into curriculum planning as a goal for programming education. This study introduced flow design into programming curricula to investigate its impact on undergraduates ’CT skills during pair work. Two types of flow design approaches, construct-by-self flow design (CBS-FD) and construct-on-scaffold flow design (COS-FD), were proposed to determine which approach better enhances students’ CT skills. Seventy-six first-year undergraduates participated, including thirty in the CBS group and thirty-six in the COS group. Evaluations made from the results and processes of programming tasks were employed to describe computational performance and computational practices, respectively. Data gathered from CT skill surveys were thoroughly analyzed to gain a deeper understanding of computational perspectives. Our findings highlighted that COS-FD significantly improved participants’ computational performance compared with CBS-FD. The COS groups fostered an engaging, sharing atmosphere, while CBS groups spent more energy on negotiating the manipulation of flow design. Moreover, both COS-FD and CBS-FD proved beneficial in enhancing participants’ computational perspectives, with the COS groups better improving their algorithm thinking. The study presents valuable perspectives on the design and implementation of collaborative programming activities within curriculum education.}
}

@article{doi:10.1177/0735633120979930,
author = {Zhihao Cui and Oi-Lam Ng},
title = {The Interplay Between Mathematical and Computational Thinking in Primary School Students’ Mathematical Problem-Solving Within a Programming Environment},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {5},
pages = {988–1012},
year = {2021a},
doi = {10.1177/0735633120979930},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120979930},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120979930},
abstract = {In this paper, we explore the challenges experienced by a group of Primary 5 to 6 (age 12–14) students as they engaged in a series of problem-solving tasks through block-based programming. The challenges were analysed according to a taxonomy focusing on the presence of computational thinking (CT) elements in mathematics contexts: preparing problems, programming, create computational abstractions, as well as troubleshooting and debugging. Our results suggested that the challenges experienced by students were compounded by both having to learn the CT-based environment as well as to apply mathematical concepts and problem solving in that environment. Possible explanations for the observed challenges stemming from differences between CT and mathematical thinking are discussed in detail, along with suggestions towards improving the effectiveness of integrating CT into mathematics learning. This study provides evidence-based directions towards enriching mathematics education with computation.}
}
@article{doi:10.1177/07356331241251397,
author = {Qing Guo and Huan Li and Sha Zhu},
title = {Understanding the Characteristics of Students’ Behavioral Processes in Solving Computational Thinking Problems Based on the Behavioral Sequences},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {6},
pages = {1475–1508},
year = {2024b},
doi = {10.1177/07356331241251397},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241251397},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241251397},
abstract = {Previous research has not adequately explored students’ behavioral processes when addressing computational thinking (CT) problems of varying difficulty, limiting insights into students’ detailed CT development characteristics. This study seeks to fill this gap by employing gamified CT items across multiple difficulty levels to calculate comprehensive behavioral sequence quality indicators. And then, through latent profile analysis, we identified four distinct latent classes of behavioral process. We then examined the in-game performance differences among these classes, uncovering each class’s unique attributes. Class 1 students consistently demonstrated high-quality, efficient behavioral sequences regardless of item difficulty. In contrast, class 2 students applied significant cognitive effort and trial-and-error strategies, achieving acceptable scores despite low behavioral sequence quality. Class 3 students excelled in simpler items but faltered with more complex ones. Class 4 students displayed low motivation for challenging items, often guessing answers quickly. Additionally, we investigated the predictive value of students’ performance in gamified items and their behavioral process classes for their external CT test scores. The study finally elaborated on the theoretical implications for researchers and the practical suggestions for teachers in CT cultivation.}
}
@article{doi:10.1177/21582440231217715,
author = {Tsung-Chih Hsiao and Ya-Hsueh Chuang and Chien-Yun Chang and Tzer-Long Chen and Hong-Bo Zhang and Jhih-Chung Chang},
title = {Combining Building Block Process With Computational Thinking Improves Learning Outcomes of Python Programming With Peer Assessment},
journal = {Sage Open},
volume = {13},
number = {4},
pages = {21582440231217716},
year = {2023c},
doi = {10.1177/21582440231217715},
URL = {https://doi-org.crai.referencistas.com/10.1177/21582440231217715},
eprint = {https://doi-org.crai.referencistas.com/10.1177/21582440231217715},
abstract = {The capability of computer programming language logic is one of the basics of technical education. How to improve students “interest in program logic design and help overcome students” fears of coding has become vital for educators. Cultivating practical talents with information technology application and basic programming development will become one of the important topics in the department of information related science. The objective of this research is to improve the ability of learning basic programming courses by using Zuvio interactive software. Zuvio employs the mathematical logic of computational thinking to analyze problems and enhance learners’ interest in learning programming skills through a graphical interface tool with building blocks. It uses innovative interactive teaching to use peer and self-assessment to study the content of the course. Zuvio improves the design ability of different groups of class learning Python programming. In line with the innovative teaching policy of the schools and the current stage of the learner’s learning model, learning effectiveness can be achieved. The research results were analyzed by midterm and final experimental group scores, and the progress of the experimental group’s scores was examined through descriptive statistics. The average and standard deviation of the assessment were used to analyze the progress of the experimental group students in the programming course. In the classroom, assessment criteria were set up as the basis for peer assessment scoring. After the midterm and final exams, the teacher assessment and peer assessment scores were analyzed for cognitive differences, and possible learning differences were analyzed. The students’ professional ability was examined to see if it met the professional standards required by the course, and whether innovative teaching methods could improve the learning outcomes of learners with different professional backgrounds in Python programming.}
}
@article{doi:10.1177/0735633121992480,
author = {Ting-Chia Hsu and Yi-Sian Liang},
title = {Simultaneously Improving Computational Thinking and Foreign Language Learning: Interdisciplinary Media With Plugged and Unplugged Approaches},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {6},
pages = {1184–1207},
year = {2021d},
doi = {10.1177/0735633121992480},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633121992480},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633121992480},
abstract = {This study proposed plugged and unplugged approaches for young students to simultaneously improve their interdisciplinary learning performance in English and Computational Thinking (CT). The plugged approach involved adopting educational robots to enhance CT and to provide English vocabulary and sentence practice via a board game. The unplugged version of the educational board game involved using a conventional board game without a computer, although it was designed for practicing CT as well as some foreign language vocabulary and conversational sentences. The results show that both approaches were helpful for simultaneously improving the students’ English proficiency of the target vocabulary and sentences, and their CT competence. The students’ foreign language learning anxiety during the English conversation in the plugged game was significantly lower than that of the students playing the unplugged game. On one hand, the cooperation tendency of the CT scale improved significantly for the students playing the unplugged game. On the other hand, the critical thinking of the CT scale improved significantly for those using the plugged approach. This research provides an innovation development and evaluation for plugged and unplugged approaches.}
}
@article{doi:10.1177/0735633119887187,
author = {Rotem Israel-Fishelson and Arnon Hershkovitz},
title = {Persistence in a Game-Based Learning Environment: The Case of Elementary School Students Learning Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {58},
number = {5},
pages = {891–918},
year = {2020e},
doi = {10.1177/0735633119887187},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633119887187},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633119887187},
abstract = {Persistence has proven to be a great challenge in online learning environments. Gaming and interactivity have been suggested as essential features in reducing dropout and increasing persistence in online learning. Yet in interactive game-based learning environments, persistence in moving forward in the game may come at the expense of investing in each of the game’s levels. That is, the motivation to complete the game may have a deleterious effect on learning at specific levels and hence on learning from the game in general. Therefore, we have chosen to focus on microlevel persistence (i.e., persistence during each component of the learning process). We study microlevel persistence in the context of acquiring computational thinking—the thought process of solving problems through abstraction—which is a key component of the new literacies needed for tomorrow’s citizens. In this study, we analyze data collected from an online, game-based learning environment (CodeMonkeyTM). The data document the activity of first to sixth graders (N = 2,040). Overall, we find that persistence is positively associated with difficulty and that the most determined learners were highly persistent across topics in achieving the best solution.}
}
@article{doi:10.3102/0013189X211057904,
author = {Yasmin B. Kafai and Chris Proctor},
title = {A Revaluation of Computational Thinking in K–12 Education: Moving Toward Computational Literacies},
journal = {Educational Researcher},
volume = {51},
number = {2},
pages = {146–151},
year = {2022f},
doi = {10.3102/0013189X211057904},
URL = {https://doi-org.crai.referencistas.com/10.3102/0013189X211057904},
eprint = {https://doi-org.crai.referencistas.com/10.3102/0013189X211057904},
abstract = {Over the past decade, initiatives around the world have introduced computing into K–12 education under the umbrella of computational thinking. While initial implementations focused on skills and knowledge for college and career readiness, more recent framings include situated computational thinking (identity, participation, creative expression) and critical computational thinking (political and ethical impacts of computing, justice). This expansion reflects a revaluation of what it means for learners to be computationally-literate in the 21st century. We review the current landscape of K–12 computing education, discuss interactions between different framings of computational thinking, and consider how an encompassing framework of computational literacies clarifies the importance of computing for broader K–12 educational priorities as well as key unresolved issues.}
}
@article{doi:10.1177/07356331221133822,
author = {Ana Melro and Georgie Tarling and Taro Fujita and Judith Kleine Staarman},
title = {What Else Can Be Learned When Coding? A Configurative Literature Review of Learning Opportunities Through Computational Thinking},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {4},
pages = {901–924},
year = {2023g},
doi = {10.1177/07356331221133822},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221133822},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221133822},
abstract = {Underpinning the teaching of coding with Computational Thinking has proved relevant for diverse learners, particularly given the increasing demand in upskilling for today’s labour market. While literature on computing education is vast, it remains unexplored how existing CT conceptualisations relate to the learning opportunities needed for a meaningful application of coding in non-Computer Scientists’ lives and careers. In order to identify and organise the learning opportunities in the literature about CT, we conducted a configurative literature review of studies published on Web of Science, between 2006 and 2021. Our sample gathers 34 papers and was analysed on NVivo to find key themes. We were able to organise framings of CT and related learning opportunities into three dimensions: functional, collaborative, and critical and creative. These dimensions make visible learning opportunities that range from individual cognitive development to interdisciplinary working with others, and to active participation in a technologically evolving society. By comparing and contrasting frameworks, we identify and explain different perspectives on skills. Furthermore, the three-dimensional model can guide pedagogical design and practice in coding courses.}
}
@article{doi:10.1177/07356331231210560,
author = {Yu-Sheng Su and Shuwen Wang and Xiaohong Liu},
title = {Using Epistemic Network Analysis to Explore Primary School Students’ Computational Thinking in Pair Programming Learning},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {2},
pages = {559–593},
year = {2024h},
doi = {10.1177/07356331231210560},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231210560},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231210560},
abstract = {Pair programming (PP) can help improve students’ computational thinking (CT), but the trajectory of CT skills and the differences between high-scoring and low-scoring students in PP are unknown and need further exploration. In this study, a total of 32 fifth graders worked on Scratch tasks in 16 pairs. The group discourse of three learning topics (comprising 9 projects) was collected. After the audio files were transcribed, 1,303 conversations were obtained. They were analyzed via Epistemic Network Analysis (ENA) Webkit, which can reveal the trajectory of students’ CT development via analyzing codes of discourse related to CT in PP. Three Scratch learning topics were assessed based on the Dr. Scratch platform to acquire the level of students’ CT and to determine the low- and high-scoring groups. Results indicated that CT concepts and CT practices were always closely related in PP and CT practices, and CT perspectives could be gradually and closely related after a long period of CT training. A significant difference between the two groups’ CT structures was found. The high-scoring group had more fragments of CT practice and connecting of CT perspectives, while the low-scoring group showed more fragments of CT concepts and expressing of CT perspectives. This research provides insights into cultivating primary school students’ CT using Scratch in the context of PP. The findings can provide suggestions for instructors to design instructional interventions to facilitate students’ CT skills via PP learning. Instructors can improve CT skills by guiding students to constantly ask questions, and specifying the role swap between driver and navigator in PP. Besides, instructors could give more consideration to the development of CT perspectives, and especially the ability to question.}
}
@article{doi:10.1177/07356331241248686,
author = {Xiaojing Weng and Huiyan Ye and Yun Dai and Oi-lam Ng},
title = {Integrating Artificial Intelligence and Computational Thinking in Educational Contexts: A Systematic Review of Instructional Design and Student Learning Outcomes},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {6},
pages = {1640–1670},
year = {2024i},
doi = {10.1177/07356331241248686},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241248686},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241248686},
abstract = {A growing body of research is focusing on integrating artificial intelligence (AI) and computational thinking (CT) to enhance student learning outcomes. Many researchers have designed instructional activities to achieve various learning goals within this field. Despite the prevalence of studies focusing on instructional design and student learning outcomes, how instructional efforts result in the integration of AI and CT in students’ learning processes remains unclear. To address this research gap, we conducted a systematic literature review of empirical studies that have integrated AI and CT for student development. We collected 18 papers from four prominent research databases in the fields of education and AI technology: Web of Science, Scopus, IEEE, and ACM. We coded the collected studies, highlighting the students’ learning processes in terms of research methodology and context, learning tools and instructional design, student learning outcomes, and the interaction between AI and CT. The integration of AI and CT occurs in two ways: the integration of disciplinary knowledge and leveraging AI tools to learn CT. Specifically, we discovered that AI- and CT-related tools, projects, and problems facilitated student-centered instructional designs, resulting in productive AI and CT learning outcomes.}
}
@article{doi:10.1177/07356331241226459,
author = {Weipeng Yang},
title = {Coding With Robots or Tablets? Effects of Technology-Enhanced Embodied Learning on Preschoolers’ Computational Thinking and Social-Emotional Competence},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {4},
pages = {938–960},
year = {2024j},
doi = {10.1177/07356331241226459},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241226459},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241226459},
abstract = {Computational Thinking (CT) is essential for developing creativity, problem-solving, and digital competence in the 21st century. Coding tools like robotic toys and tablet apps have become popular in early childhood education to support CT development, but there is a debate on which tool is more effective. Little evidence exists on the effect of coding on children’s Social-Emotional Competence (SEC), which is crucial for lifelong development and extends beyond cognitive development. This experimental study aimed to compare the effectiveness of two 9-week programs on promoting 73 preschool children’s CT and SEC, one using coding robots and the other using coding apps. The results showed that children who participated in the Coding Robot Program had higher CT scores than those in the Coding App Program, after controlling for age, gender, family socioeconomic status, and baseline CT scores. While the SEC scores showed no substantial disparities between the groups, it was revealed that the initial performance levels moderated the intervention effects on emotional regulation and overall SEC. This suggests that the Coding Robot Program could be especially advantageous for a subset of children who initially have difficulties with emotional regulation and social skills. Implications of this study are presented for research and practice.}
}

@article{doi:10.1177/0888406421992376,
author = {Emily C. Bouck and Phil Sands and Holly Long and Aman Yadav},
title = {Preparing Special Education Preservice Teachers to Teach Computational Thinking and Computer Science in Mathematics},
journal = {Teacher Education and Special Education},
volume = {44},
number = {3},
pages = {221–238},
year = {2021a},
doi = {10.1177/0888406421992376},
URL = {https://doi-org.crai.referencistas.com/10.1177/0888406421992376},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0888406421992376},
abstract = {Increasingly in K–12 schools, students are gaining access to computational thinking (CT) and computer science (CS). This access, however, is not always extended to students with disabilities. One way to increase CT and CS (CT/CS) exposure for students with disabilities is through preparing special education teachers to do so. In this study, researchers explore exposing special education preservice teachers to the ideas of CT/CS in the context of a mathematics methods course for students with disabilities or those at risk of disability. Through analyzing lesson plans and reflections from 31 preservice special education teachers, the researchers learned that overall emerging promise exists with regard to the limited exposure of preservice special education teachers to CT/CS in mathematics. Specifically, preservice teachers demonstrated the ability to include CT/CS in math lesson plans and showed understanding of how CT/CS might enhance instruction with students with disabilities via reflections on these lessons. The researchers, however, also found a need for increased experiences and opportunities for preservice special education teachers with CT/CS to more positively impact access for students with disabilities.}
}
@article{doi:10.1177/0162643420978564,
author = {Emily C. Bouck and Aman Yadav},
title = {Providing Access and Opportunity for Computational Thinking and Computer Science to Support Mathematics for Students With Disabilities},
journal = {Journal of Special Education Technology},
volume = {37},
number = {1},
pages = {151–160},
year = {2022b},
doi = {10.1177/0162643420978564},
URL = {https://doi-org.crai.referencistas.com/10.1177/0162643420978564},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0162643420978564},
abstract = {The ideas of computational thinking (CT) and computer science (CS) are increasingly being integrated into K-12 education. Yet, insufficient attention exists regarding access and exposure of CT and CS for students with disabilities. In this Technology in Action, the authors sought to present an argument—as well as actual activities—for teachers to start to expose and engage students with disabilities in CT and CS. Through the presentation of case studies as well as other non-case situated activities, practical ideas, and steps for integrating CT and CS in mathematics teaching and learning for students with disabilities are presented.}
}
@article{doi:10.1177/1326365X20970421,
author = {Kayt Davies},
title = {Why I Do Not Talk About Computational Thinking in Journalism Classes: Sorry (Not Really Sorry)},
journal = {Asia Pacific Media Educator},
volume = {30},
number = {2},
pages = {234–242},
year = {2020c},
doi = {10.1177/1326365X20970421},
URL = {https://doi-org.crai.referencistas.com/10.1177/1326365X20970421},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1326365X20970421}
}
@article{doi:10.1177/0735633120973432,
author = {Shlomit Hadad and Tamar Shamir-Inbal and Ina Blau and Eynat Leykin},
title = {Professional Development of Code and Robotics Teachers Through Small Private Online Course (SPOC): Teacher Centrality and Pedagogical Strategies for Developing Computational Thinking of Students},
journal = {Journal of Educational Computing Research},
volume = {59},
number = {4},
pages = {763–791},
year = {2021d},
doi = {10.1177/0735633120973432},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633120973432},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633120973432},
abstract = {This study explored (1) pedagogical strategies in Educational Coding and Robotics (ECR) learning which can develop computational thinking of students and (2) the degree of teacher centrality in the ECR classroom. In addition, we investigated (3) the added value of the Small Private Online Course (SPOC) to teacher professional development (TPD). We analyzed reflections of 80 in-service teachers on TPD through the SPOC (1,091 statements) and conducted semi-structured interviews with 13 of them one year after completing the course and teaching ECR in the classroom (328 statements). The most prominent strategies immediately after the TPD were constructing learning experiences, tinkering & debugging, and interdisciplinary learning, while one year later, experiential learning and collaborative learning were more common. Regarding the degree of teacher centrality, a year after teaching ECR curriculum the teachers had a significantly higher percentage of statements reflecting their role as a guide-on-the-side and as a partner of students in the learning process. Regarding the contribution of the SPOC for TPD, teacher statements revealed significantly more benefits than challenges in both points of time. Interestingly, the same categories emerged bottom-up as benefits and challenges: a variety of control dimensions, independent learning, learning and knowledge management and collaboration. Implications for educational theory and ECR practice are discussed.}
}
@article{doi:10.1177/0040059915594790,
author = {Maya Israel and Quentin M. Wherfel and Jamie Pearson and Saadeddine Shehab and Tanya Tapia},
title = {Empowering K–12 Students With Disabilities to Learn Computational Thinking and Computer Programming},
journal = {TEACHING Exceptional Children},
volume = {48},
number = {1},
pages = {45–53},
year = {2015e},
doi = {10.1177/0040059915594790},
URL = {https://doi-org.crai.referencistas.com/10.1177/0040059915594790},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0040059915594790}
}
@article{doi:10.2190/EC.49.4.b,
author = {Byeongsu Kim and Taehun Kim and Jonghoon Kim},
title = {Paper-and-Pencil Programming Strategy toward Computational Thinking for Non-Majors: Design Your Solution},
journal = {Journal of Educational Computing Research},
volume = {49},
number = {4},
pages = {437–459},
year = {2013f},
doi = {10.2190/EC.49.4.b},
URL = {https://doi-org.crai.referencistas.com/10.2190/EC.49.4.b},
eprint = {https://doi-org.crai.referencistas.com/10.2190/EC.49.4.b},
abstract = {The paper-and-pencil programming strategy (PPS) is a way of representing an idea logically by any representation that can be created using paper and pencil. It was developed for non-computer majors to improve their understanding and use of computational thinking and increase interest in learning computer science. A total of 110 non-majors in their sophomore year were assigned to either a Logo or a PPS course with attendance being 2 hours per week for 15 weeks. To measure the effectiveness of PPS, the Group Assessment of Logical Thinking and a self-assessment survey pre- and post-test were used. Findings indicated that PPS not only improved students’ overall logical thinking as much as did Logo programming learning, but also increased scores on one more subscale of logical thinking than did the Logo course. In addition, PPS significantly helped students understand the concept of computational thinking and increased their interest in learning computer science.}
}
@article{doi:10.1177/07356331231211916,
author = {Hsin-Yu Lee and Ting-Ting Wu and Chia-Ju Lin and Wei-Sheng Wang and Yueh-Min Huang},
title = {Integrating Computational Thinking Into Scaffolding Learning: An Innovative Approach to Enhance Science, Technology, Engineering, and Mathematics Hands-On Learning},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {2},
pages = {431–467},
year = {2024g},
doi = {10.1177/07356331231211916},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231211916},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231211916},
abstract = {Science, Technology, Engineering, and Mathematics (STEM) education is essential for developing future-ready learners in both secondary and higher education levels. However, as students transition to higher education, many encounter challenges with independent learning and research. This can negatively impact their Higher-Order Thinking Skills (HOTS), engagement, and practical expertise. This study introduces a solution: Computational Thinking Scaffolding (CTS) in the Jupyter Notebook environment, designed to enhance STEM education at the tertiary level. CTS incorporates five phases: Decomposition, Pattern Recognition, Abstraction, Algorithm Design, and Evaluation. Utilizing a quasi-experimental method, we assessed the impact of CTS on the HOTS, engagement, and practical skills of undergraduate and postgraduate students. Our findings hold substantial relevance for university educators, academic advisors, and curriculum designers aiming to enhance students’ HOTS and hands-on capabilities in STEM disciplines. The results validate the effectiveness of CTS in elevating tertiary STEM learning outcomes, and they spotlight the adaptability of the Jupyter Notebook as a valuable tool in higher education. In conclusion, our research underscores the merits of CTS for improving outcomes in higher STEM education and sets a benchmark for future endeavors in this domain.}
}
@article{doi:10.1177/1461444820923674,
author = {Samantha Shorey and Benjamin Mako Hill and Samuel Woolley},
title = {From hanging out to figuring it out: Socializing online as a pathway to computational thinking},
journal = {New Media & Society},
volume = {23},
number = {8},
pages = {2327–2344},
year = {2021h},
doi = {10.1177/1461444820923674},
URL = {https://doi-org.crai.referencistas.com/10.1177/1461444820923674},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1461444820923674},
abstract = {Although socializing is a powerful driver of youth engagement online, platforms struggle to leverage social engagement to promote learning. We seek to understand this dynamic using a multi-stage analysis of over 14,000 comments on Scratch, an online platform designed to support learning about programming. First, we inductively develop the concept of “participatory debugging”—a practice in which users learn through the process of collaborative technical troubleshooting. Second, we use a content analysis to establish how common the practice is on Scratch. Third, we conduct a qualitative analysis of user activity over time and identify three factors that serve as social antecedents of participatory debugging: (1) sustained community, (2) identifiable problems, and (3) what we call “topic porousness” to describe conversations that are able to span multiple topics. We integrate these findings in a framework that highlights a productive tension between the desire to promote learning and the interest-driven sub-communities that drive user engagement in many new media environments.}
}
@article{doi:10.1177/02103702241253407,
author = {Yue Zeng and Weipeng Yang and Alfredo Bautista},
title = {Developing young children’s computational thinking through programming with a hybrid kit / Desarrollo del pensamiento computacional infantil a través de la programación con un kit híbrido},
journal = {Journal for the Study of Education and Development},
volume = {47},
number = {2},
pages = {408–441},
year = {2024i},
doi = {10.1177/02103702241253407},
URL = {https://doi-org.crai.referencistas.com/10.1177/02103702241253407},
eprint = {https://doi-org.crai.referencistas.com/10.1177/02103702241253407},
abstract = {Fostering young children’s computational thinking (CT) has garnered global interest as it aligns with the cultivation of twenty-first-century skills. Previous studies have focused on physical, virtual and hybrid kits with virtual programming blocks, but rarely explored the use of hybrid kits that combine virtual sprites and physical programming environments. We conducted a quasi-experimental study to investigate the effect of using a hybrid programming kit on young children’s CT. Furthermore, we explored the characteristics of children’s programming engagement and the instructional strategies employed by teachers through video analysis and interviews. The results showed that: (1) children’s CT in the experimental group significantly improved, compared to that of peers in the control group; (2) children’s programming behaviour demonstrated a change from ‘action preceding thought’ to ‘thought preceding action’ and from ‘relying on trial and error’ to ‘active debugging’ with the support of teachers; (3) teachers used multiple strategies to support young children’s programming. These findings further indicate the importance of introducing programming in early childhood education and emphasize the critical role that teachers play in supporting young children’s learning of programming.}
}
@article{doi:10.1177/01626434221116077,
title = {Corrigendum to “Providing Access and Opportunity for Computational Thinking and Computer Science to Support Mathematics for Students With Disabilities”},
journal = {Journal of Special Education Technology},
volume = {38},
number = {3},
pages = {417–417},
year = {2023j},
doi = {10.1177/01626434221116077},
URL = {https://doi-org.crai.referencistas.com/10.1177/01626434221116077},
eprint = {https://doi-org.crai.referencistas.com/10.1177/01626434221116077}
}

@article{doi:10.1177/07356331221102312,
author = {Anat Ben-Yaacov and Arnon Hershkovitz},
title = {Types of Errors in Block Programming: Driven by Learner, Learning Environment},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {1},
pages = {178–207},
year = {2023a},
doi = {10.1177/07356331221102312},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221102312},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221102312},
abstract = {Block programming has been suggested as a way of engaging young learners with the foundations of programming and computational thinking in a syntax-free manner. Indeed, syntax errors—which form one of two broad categories of errors in programming, the other one being logic errors—are omitted while block programming. However, this does not mean that errors are omitted at large in such environments. In this exploratory case study of a learning environment for early programming (Kodetu), we explored errors in block programming of middle school students (N = 123), using log files drawn from a block-based online. Analyzing 1033 failed executions, we found that errors may be driven by either learners’ knowledge and behavior, or by the learning environment design. The rate of error types was not associated with the learners’ and contextual variables examined, with the exception of task complexity (as defined by SOLO taxonomy). Our findings highlight the importance of learning from errors and of learning environment design.}
}
@article{doi:10.1177/0735633116642774,
author = {Ibrahim Cetin},
title = {Preservice Teachers’ Introduction to Computing: Exploring Utilization of Scratch},
journal = {Journal of Educational Computing Research},
volume = {54},
number = {7},
pages = {997–1021},
year = {2016b},
doi = {10.1177/0735633116642774},
URL = {https://doi-org.crai.referencistas.com/10.1177/0735633116642774},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0735633116642774},
abstract = {Computational thinking has been gaining new impetus in the academic community and in K-12 level education. Scratch is a visual programming environment that can be utilized to teach and learn introductory computing concepts. There are some studies investigating the effectiveness of Scratch for K-12 level education. However, studies that have been conducted at the collegiate level, especially in the context of preservice computing teacher education, are very rare. The present study aimed to investigate the effect of Scratch-based instruction on preservice teachers’ understanding of basic programming concepts and their attitudes toward programming. In the present study, a mixed method design was utilized. In the first phase of the study, the data were collected using an achievement test, a practice test, and a computer programming attitude scale. In the second phase of the study, data were collected through a semistructured interview. The results of the study indicated that preservice teachers in Scratch-based instruction had significantly better understanding of basic computing concepts. Qualitative data indicated that Scratch-based instruction was useful in constructing a more meaningful learning environment for preservice teachers. The results of this study have implications for researchers and preservice computing teacher educators when designing an introductory computing course.}
}
@article{doi:10.1177/0042085913490554,
author = {Shaundra Bryant Daily and Wanda Eugene},
title = {Preparing the Future STEM Workforce for Diverse Environments},
journal = {Urban Education},
volume = {48},
number = {5},
pages = {682–704},
year = {2013c},
doi = {10.1177/0042085913490554},
URL = {https://doi-org.crai.referencistas.com/10.1177/0042085913490554},
eprint = {https://doi-org.crai.referencistas.com/10.1177/0042085913490554},
abstract = {Following the belief that diversity breeds innovation in scientific endeavors, there is a national push for more diversity in the science, technology, engineering, and mathematics (STEM) workforce in order to maintain national economic competitiveness. Currently, STEM-related employment is only 28% non-White; however, greater efforts to recruit and retain underrepresented minorities should increase this figure. Amidst the attention given to supporting “leaky pipelines,” less emphasis has been placed on mitigating challenges associated with bringing diverse cultures together. This article presents a framework for supporting underrepresented minorities in building STEM-relevant skills and enhancing their ability to collaborate with peers different from themselves.}
}
@article{doi:10.1177/07356331241236882,
author = {Chung-Yuan Hsu and Meng-Jung Tsai},
title = {Predicting Robotics Pedagogical Content Knowledge: The Role of Computational and Design Thinking Dispositions via Teaching Beliefs},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {5},
pages = {1159–1181},
year = {2024d},
doi = {10.1177/07356331241236882},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241236882},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241236882},
abstract = {This research aimed to investigate the structural relationships among teachers’ computational thinking (CT), design thinking (DT), robotics teaching beliefs, and robotics pedagogical content knowledge (RPCK). A total of 98 in-service and pre-service teachers who participated in a robotics teaching professional development workshop served as the sample of the study. A survey including the Computational Thinking Scale, the Design Thinking Disposition Scale, the Robotics Teaching Beliefs Scale and the Technological Pedagogical Content Knowledge–Robotics Scale was conducted after the workshop. A confirmatory factor analysis was employed to validate the measurement constructs, and Partial Least Squares - Structural Equation Modeling (PLS-SEM) analysis was utilized to examine the relationships among the factors. The results revealed that both CT and DT dispositions could positively predict teachers’ robotics teaching beliefs, which subsequently predicted their RPCK. Moreover, a direct positive relationship between CT and RPCK was identified, while such a relationship was not evident for DT. The model demonstrates the critical role of CT in shaping teachers’ beliefs and pedagogical strategies of robotics teaching, and provides insights into the indirect influence of DT. Finally, the Model of Robotics Teaching Professional Development (MRTPD) was proposed to profile how to promote teachers’ pedagogical content knowledge of robotics teaching from their CT and DT dispositions.}
}
@article{doi:10.1177/07356331211017793,
author = {Avital Kesler and Tamar Shamir-Inbal and Ina Blau},
title = {Active Learning by Visual Programming: Pedagogical Perspectives of Instructivist and Constructivist Code Teachers and Their Implications on Actual Teaching Strategies and Students’ Programming Artifacts},
journal = {Journal of Educational Computing Research},
volume = {60},
number = {1},
pages = {28–55},
year = {2022e},
doi = {10.1177/07356331211017793},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331211017793},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331211017793},
abstract = {The integration of visual programming in early formal education has been found to promote computational thinking of students. Teachers’ intuitive perspectives about optimal learning processes – “folk psychology” – impact their perspectives about teaching “folk pedagogy” and play a significant role in integrating educational technologies, such as visual programming, within the formal curriculum. This study was conducted based on the mixed method research paradigm. First, a folk pedagogy questionnaire was distributed to 89 teachers who integrate differing technologies in their classroom in order to identify the teachers’ pedagogical perspectives: constructivist versus instructivist. Then, semi-structured interviews were conducted with 24 teachers who teach Scratch in order to gain a deeper understanding of their instructivist/constructivist perspectives and actual pedagogical practices and strategies. Finally, we analyzed 96 students’ programming artifacts to explore differences, if any, in students’ outcomes related to the pedagogical perspectives of their teachers. Findings revealed that pedagogical perspectives are reflected in teaching strategies and assessment practices employed in a visual programming environment. It is promising that teaching visual programming promoted constructivist pedagogy even among instructivist teachers and was consequently reflected in student perspectives and expressed in their programming artifacts. We discuss theoretical and educational implications of these findings.}
}
@article{doi:10.1177/14639491211033663,
author = {Joohi Lee and Candace Joswick and Kathryn Pole and Robin Jocius},
title = {Algorithm design for young children},
journal = {Contemporary Issues in Early Childhood},
volume = {23},
number = {2},
pages = {198–202},
year = {2022f},
doi = {10.1177/14639491211033663},
URL = {https://doi-org.crai.referencistas.com/10.1177/14639491211033663},
eprint = {https://doi-org.crai.referencistas.com/10.1177/14639491211033663},
abstract = {Algorithms are the essence of computational thinking, which refers to a set of problem-solving processes that help children become logical thinkers in this increasingly digital society. It is important for teachers of young children to carefully plan and implement algorithm design tasks that involve repeated step-by-step procedures to build strong foundational computational thinking skills. In this article, the authors present algorithm tasks, including following a recipe, creating a treasure map, modeling how to perform a task, and sharing a routine, which can be easily integrated in the daily activities in early childhood classrooms. Fostering young children’s aptitude for algorithm-specific thinking-and-doing processes creates a foundation for logical thinking.}
}
@article{doi:10.1080/11356405.2017.1305075,
author = {José-Manuel Sáez-López and María-Luisa Sevillano-García},
title = {Sensors, programming and devices in Art Education sessions. One case in the context of primary education / Sensores, programación y dispositivos en sesiones de Educación Artística. Un caso en el contexto de Educación Primaria},
journal = {Culture and Education},
volume = {29},
number = {2},
pages = {350–384},
year = {2017g},
doi = {10.1080/11356405.2017.1305075},
URL = {https://doi-org.crai.referencistas.com/10.1080/11356405.2017.1305075},
eprint = {https://doi-org.crai.referencistas.com/10.1080/11356405.2017.1305075},
abstract = {The pedagogical integration of computing is interesting in educational contexts based on the contributions of Seymour Papert and Wing’s concept of computational thinking. Integrating arts in education can lead to the design of activities using Scratch combined with devices. The main goal is to evaluate the integration of computational thinking in art education making use of technological resources, sensor cards and minicomputers, with a student-centred pedagogical approach. This research assesses the results of a control group of 35 students and an experimental group of 109 students in four different schools, using Mann-Whitney’s U-test for independent samples assessing ‘Active Learning’, ‘computational concepts’ and ‘fun’ scales. Applying data triangulation, and consistent with design-based research, the results of interviews and focus groups reinforced the results obtained in the aforementioned test, providing validity to the study. There are advantages regarding student interest, motivation and commitment related to programming technologies in art and education, particularly pedagogical sessions with music. Handling devices, sensors and Raspberry Pi provides participating students with a factor of commitment and enthusiasm, with significant improvements. Working with coding and devices brings an additional advantage in the development of computational thinking and digital competence. The results show an increase in creativity and artistic competence related to the ability to create music from the activities and technological resources described in the technological intervention.}
}
@article{doi:10.1177/1076217519880587,
author = {Del Siegle},
title = {There’s an App for That, and I Made It},
journal = {Gifted Child Today},
volume = {43},
number = {1},
pages = {64–71},
year = {2020h},
doi = {10.1177/1076217519880587},
URL = {https://doi-org.crai.referencistas.com/10.1177/1076217519880587},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1076217519880587},
abstract = {The Thunkable online platform is an easy-to-use resource for creating apps for mobile devices. Computational thinking is at the heart of problem solving in computer science, and research suggests students’ computational thinking improves when they use simple block coding systems similar to the format used for Thunkable.}
}
@article{doi:10.1177/21582440231205409,
author = {Fu-Hsing Tsai},
title = {Using a Physical Computing Project to Prepare Preservice Primary Teachers for Teaching Programing},
journal = {Sage Open},
volume = {13},
number = {4},
pages = {21582440231205410},
year = {2023i},
doi = {10.1177/21582440231205409},
URL = {https://doi-org.crai.referencistas.com/10.1177/21582440231205409},
eprint = {https://doi-org.crai.referencistas.com/10.1177/21582440231205409},
abstract = {The cultivation of computational thinking and programing education have gained prominence in K-12 education worldwide. Primary school teachers should be proficient in visual programing and using microcontrollers to teach programing courses. To cope with these trends, a learning activity was developed and implemented in Taiwan’s primary teacher education curriculum. The activity aimed to help preservice primary teachers learn about Scratch visual programing and micro:bit microcontroller boards by engaging in a physical computing project involving the design of an educational motion sensor game about energy. The results of the preliminary study found that the preservice primary teachers who participated in the activity were able to collaborate and develop motion sensor games suitable for primary school students. They also demonstrated significant improvements in their computational thinking concepts (t(10) = 3.13, p < .05) and energy knowledge test scores (t(10) = 2.74, p < .05). Furthermore, most participants expressed satisfaction with the activity, implying the activity’s feasibility for teacher education.}
}
@article{doi:10.1177/07356331231225468,
author = {Ting-Ting Wu and Lusia Maryani Silitonga and Budi Dharmawan and Astrid Tiara Murti},
title = {Empowering Students to Thrive: The Role of CT and Self-Efficacy in Building Academic Resilience},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {3},
pages = {816–845},
year = {2024j},
doi = {10.1177/07356331231225468},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231225468},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231225468},
abstract = {The relationship between computational thinking (CT) and academic self-efficacy for building students’ academic resilience—a trait crucial for problem-solving, peer relationships, and confidence development—was investigated. A mixed-methods approach was employed in a study involving 60 participants; half were given CT instruction and half were instructed traditionally. Quantitative data were analyzed using analysis of covariance and path analysis, while MAXQDA software was employed for qualitative interview data. The study found a positive correlation between CT instruction and academic self-efficacy with increased academic resilience, particularly in the experimental group, and identified key factors contributing to resilience. This study demonstrates the effectiveness of computational thinking (CT) and academic self-efficacy in enhancing academic performance, offering a new understanding of how these elements can be integrated into education to boost student resilience. It establishes a direct empirical link between CT instruction and increased academic self-efficacy, underscoring the value of specific teaching methodologies in fostering resilience. The findings are significant for educators, policymakers, and stakeholders in developing strategies to enhance students’ academic and personal success, thereby promoting their overall well-being. Recognizing the importance of CT and self-efficacy paves the way for customized educational programs that effectively support and empower students to thrive.}
}